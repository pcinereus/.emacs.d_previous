#+STARTUP: overview



* Interface tweaks
  #+BEGIN_SRC emacs-lisp
                (setq-default inhibit-startup-message t                       ; Skip the startup screen
                              visible-bell t
                              ring-bell-function 'ignore
                              truncate-lines 0                                ; Truncate lines, don't wrap                                                             ;;
                              default-truncate-lines 0                                                                                                                                                                         ;;
                              font-lock-use-fonts '(or (mono) (grayscale))    ; Turn on syntax hilighting                                                              ;;
                              font-lock-use-colors '(color)                                                                                                                                                            ;;
                              font-lock-maximum-decoration t                                                                                                                                                           ;;
                              font-lock-maximum-size nil                                                                                                                                                               ;;
                              font-lock-auto-fontify t                                                                                                                                                                         ;;
                              global-font-lock-mode t                                                                                                                                                                          ;;
                              paren-mode 'sexp                                ; Highlight parenthesis                                                                          ;;
                              user-full-name "Murray Logan"                 ; Set name                                                                                                     ;;
                              user-mail-address "m.logan@aims.gov.au"      ; Set e-mail address                                                            ;;
                              query-user-mail-address nil                                                                                                                                                          ;;
                              display-warning-minimum-level 'error            ; Turn off anoying warning messages                                          ;;
                              delete-key-deletes-forward t                    ; Make delete key work normally                                                      ;;
                              column-number-mode t                            ; Display line and column numbers                                                ;;
                              line-number-mode t                                                                                                                                                                               ;;
                              tab-width 4                                     ; Set tab stops                                                                                      ;;
                              tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44                                                                                                                           ;;
                                                48 52 56 60 64 68 72 76 80 84)                                                                                                                     ;;
                              toolbar-print-function 'ps-print-buffer-with-faces ; Set the print button to print nice PS                               ;;
                              ps-line-number t                                                                                                                                                                                     ;;
                              ps-n-up-printing 2                                                                                                                                                                               ;;
                              ps-print-color-p nil                                                                                                                                                                         ;;
                              display-time-day-and-date t                     ; Display the time and date on the mode line                         ;;
                              case-fold-search t                              ; Fold case on searches                                                                      ;;
                              buffers-menu-sort-function 'sort-buffers-menu-by-mode-then-alphabetically ; Buffers menu settings                ;;
                              buffers-menu-grouping-function 'group-buffers-menu-by-mode-then-alphabetically                                                           ;;
                              buffers-menu-submenus-for-groups-p t                                                                                                                                         ;;
                              buffers-tab-filter-functions nil                ; Buffers tab is flat                                       ;;
                              ;;frame-title-format '(buffer-file-name "%f" ("%b")) ; Make the title bar display the buffer name           ;;
                              frame-title-format '(buffer-file-name "%b" ("%b")) ; Make the title bar display the buffer name             ;;
                              ;;               ispell-program-name "aspell"                    ; Use aspell to spell check                             ;;
                              ;;               initial-scratch-message nil                     ; I hate the initial scratch message!           ;;
                              )                                                                                                                                                                                                                        ;;

        (defalias 'yes-or-no-p 'y-or-n-p)
        (set-face-attribute 'default nil                               ;;
                                    :family "DejaVu Sans Mono" :height 80)  ;;
        (tool-bar-mode -1)
        ;;Ensures that the region betwen matching brackets are highlighted                                                                                                          ;;
        (show-paren-mode 1)   

        ;; Date and time in the emacs status bar
        (setq display-time-day-and-date t
                  display-time-24hr-format t)
        (display-time)
        (setq dired-dwim-target t)
        ;;(require 'sunrise-commander)

    ;; Always highlight the current row in a buffer
    (global-hl-line-mode 1)

  #+END_SRC
* Multiple cursors
  #+BEGIN_SRC emacs-lisp
    (use-package multiple-cursors
      :ensure t
      :bind (
             ("C-S-c C-S-c" . mc/edit-lines)
             ("C->" . mc/mark-next-like-this)
             ("C-<" . mc/mark-previous-like-this)
             ("C-c C-<" . mc/mark-all-like-this)
             ("C-." . mc/mark-more-like-this-extended)
             ("C-c m" . mc/mark-all-in-region)
             )
      )
  #+END_SRC

* Browser settings
  #+BEGIN_SRC emacs-lisp
  (setq browse-url-generic-program (executable-find "conkeror"))
  (setq browse-url-browser-function 'browse-url-generic)
  #+END_SRC


* Murray's menu
  #+BEGIN_SRC emacs-lisp
    ;; Function Menu
    ;; -------------
    ;; This sets up a really funky menu that displays the names of my functions
    ;; and procedures on the menu, puts the active one on the modeline and lets
    ;; me easily jump between functions.  Cool.  Only works in XEmacs though.
    ;;


    ;; strip-trailing-space
    ;; --------------------
    ;; Strip out trailing whitespace from all lines in a buffer.
    ;;
    (defun strip-trailing-space ()
      "Strip out trailing whitespace from all lines in buffer."
      (interactive)
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward "[ \t]+$" nil t)
          (replace-match "" t t))))
    (define-key global-map [(control ?{) ?t] 'strip-trailing-space) ; Bind to C-{ t

    ;; show-ascii-chart
    ;; ----------------
    ;; Display a helpful ASCII reference chart when called.  Useful for quickly
    ;; double checking or looking up character codes.  Usually the
    ;; what-cursor-position (C-x =) is faster for spot lookups of the number
    ;; for a character here and there.  It's terrible, however, for finding the
    ;; character given a number.
    ;;
    (defun show-ascii-chart ()
      "Display a helpful ASCII chart."
      (interactive)
      (let ((chart (concat
                    "==============================================================================\n"
                    "                        Common ASCII Codes And Escapes\n"
                    "==============================================================================\n"
                    "Char  Dec Hex Oct Esc Name             | Char  Dec Hex Oct Esc Name\n"
                    "------------------------------------------------------------------------------\n"
                    "(nul)   0  00 000 \\0  Null             | (np)   12  0c 014 \\f  Form Feed\n"
                    "(bel)   7  07 007 \\a  Audible Alert    | (cr)   13  0d 015 \\r  Carriage Return\n"
                    "(bs)    8  08 010 \\b  Backspace        | (sp)   32  20 040     Space\n"
                    "(ht)    9  09 011 \\t  Horizontal Tab   | 0      48  30 060     Zero\n"
                    "(nl)   10  0a 012 \\n  New Line         | A      65  41 101     Capital A\n"
                    "(vt)   11  0b 013 \\v  Vertical Tab     | a      97  61 141     Lowercase a\n"
                    "\n"
                    "=============================================================================\n"
                    "                                 ASCII Table\n"
                    "=============================================================================\n"
                    "Char  Dec Hex Oct | Char  Dec Hex Oct | Char  Dec Hex Oct | Char  Dec Hex Oct\n"
                    "-----------------------------------------------------------------------------\n"
                    "(nul)   0  00 000 | (sp)   32  20 040 | @      64  40 100 | `      96  60 140\n"
                    "(soh)   1  01 001 | !      33  21 041 | A      65  41 101 | a      97  61 141\n"
                    "(stx)   2  02 002 | \"      34  22 042 | B      66  42 102 | b      98  62 142\n"
                    "(etx)   3  03 003 | #      35  23 043 | C      67  43 103 | c      99  63 143\n"
                    "(eot)   4  04 004 | $      36  24 044 | D      68  44 104 | d     100  64 144\n"
                    "(enq)   5  05 005 | %      37  25 045 | E      69  45 105 | e     101  65 145\n"
                    "(ack)   6  06 006 | &      38  26 046 | F      70  46 106 | f     102  66 146\n"
                    "(bel)   7  07 007 | '      39  27 047 | G      71  47 107 | g     103  67 147\n"
                    "(bs)    8  08 010 | (      40  28 050 | H      72  48 110 | h     104  68 150\n"
                    "(ht)    9  09 011 | )      41  29 051 | I      73  49 111 | i     105  69 151\n"
                    "(nl)   10  0a 012 | *      42  2a 052 | J      74  4a 112 | j     106  6a 152\n"
                    "(vt)   11  0b 013 | +      43  2b 053 | K      75  4b 113 | k     107  6b 153\n"
                    "(np)   12  0c 014 | ,      44  2c 054 | L      76  4c 114 | l     108  6c 154\n"
                    "(cr)   13  0d 015 | -      45  2d 055 | M      77  4d 115 | m     109  6d 155\n"
                    "(so)   14  0e 016 | .      46  2e 056 | N      78  4e 116 | n     110  6e 156\n"
                    "(si)   15  0f 017 | /      47  2f 057 | O      79  4f 117 | o     111  6f 157\n"
                    "(dle)  16  10 020 | 0      48  30 060 | P      80  50 120 | p     112  70 160\n"
                    "(dc1)  17  11 021 | 1      49  31 061 | Q      81  51 121 | q     113  71 161\n"
                    "(dc2)  18  12 022 | 2      50  32 062 | R      82  52 122 | r     114  72 162\n"
                    "(dc3)  19  13 023 | 3      51  33 063 | S      83  53 123 | s     115  73 163\n"
                    "(dc4)  20  14 024 | 4      52  34 064 | T      84  54 124 | t     116  74 164\n"
                    "(nak)  21  15 025 | 5      53  35 065 | U      85  55 125 | u     117  75 165\n"
                    "(syn)  22  16 026 | 6      54  36 066 | V      86  56 126 | v     118  76 166\n"
                    "(etb)  23  17 027 | 7      55  37 067 | W      87  57 127 | w     119  77 167\n"
                    "(can)  24  18 030 | 8      56  38 070 | X      88  58 130 | x     120  78 170\n"
                    "(em)   25  19 031 | 9      57  39 071 | Y      89  59 131 | y     121  79 171\n"
                    "(sub)  26  1a 032 | :      58  3a 072 | Z      90  5a 132 | z     122  7a 172\n"
                    "(esc)  27  1b 033 | ;      59  3b 073 | [      91  5b 133 | {     123  7b 173\n"
                    "(fs)   28  1c 034 | <      60  3c 074 | \\      92  5c 134 | |     124  7c 174\n"
                    "(gs)   29  1d 035 | =      61  3d 075 | ]      93  5d 135 | }     125  7d 175\n"
                    "(rs)   30  1e 036 | >      62  3e 076 | ^      94  5e 136 | ~     126  7e 176\n"
                    "(us)   31  1f 037 | ?      63  3f 077 | _      95  5f 137 | (del) 127  7f 177\n")))
        (if (fboundp 'with-displaying-help-buffer)
            (with-displaying-help-buffer
             (lambda ()
               (princ chart))
             "ASCII Chart")
          (with-output-to-temp-buffer "ASCII Chart"
            (princ chart)))))

    ;; goto-longest-line
    ;; -----------------
    ;; Sometimes for code is nice to find lines that are pushed out too far.
    ;; This function moves point to the end of the longest line.  Also handy
    ;; for lining up columns of text when used in a narrowed buffer.
    ;;
    (defun goto-longest-line ()
      "Finds the longest line and puts the point there."
      (interactive)
      (let ((width 0)
            (pos 0))
        (goto-char (point-min))
        (while (= (forward-line 1) 0)
          (end-of-line)
          (let ((curwid (current-column)))
            (unless (<= curwid width)
              (setq width curwid)
              (setq pos (point)))))
        (goto-char pos)))

    ;; goto-matching-paren
    ;; -------------------
    ;; If point is sitting on a parenthetic character, jump to its match.
    ;; This matches the standard parenthesis highlighting for determining which
    ;; one it is sitting on.
    ;;
    (defun goto-matching-paren ()
      "If point is sitting on a parenthetic character, jump to its match."
      (interactive)
      (cond ((looking-at "\\s\(") (forward-list 1))
            ((progn
               (backward-char 1)
               (looking-at "\\s\)")) (forward-char 1) (backward-list 1))))
     (define-key global-map [(control ?{) ?p] 'goto-matching-paren) ; Bind to C-i p

    (defun R-xelatex ()
      ;;  (interactive "sfilename:?")
      (interactive)
      (setq var (split-string (read-from-minibuffer "Enter filename: "nil nil nil nil nil nil) " "))
      (setq name (car var))
      (shell-command "mkdir figures")
      (shell-command "mkdir cache")
      (shell-command "mkdir data")
      (find-file "Makefile")
      (xelatex-rnw-makefile name)
      (save-buffer)
      (kill-buffer "Makefile")
      (find-file (concat name ".rnw"))
      (xelatex-rnw-skeleton)
      (save-buffer)
      )

    (define-skeleton xelatex-rnw-makefile 
      "Inserts a basic noweb xelatex makefile skeleton into a buffer."
      ;;"filename: "
      ;;(find-file "Makefile")
      ".SUFFIXES: .rnw .tex .pdf .dvi .ps\n"
      "RNWFILES = $(wildcard *.rnw)\n"
      "TEX = $(patsubst %.rnw,%.tex,$(RNWFILES)) #$(wildcard *.tex)\n"
      "TARGET = " name "\n"
      "LATEX_ARGS=--interaction=nonstopmode --output-driv=\"xdvipdfmx -vv -V 4\"\n"
      ;;"LATEX_ARGS=--interaction=batchmode --output-driv=\"xdvipdfmx -vv -V 4\"\n"
      ;;  "LATEX_ARGS=\"-interaction=nonstopmode\"\n"
      "LATEX=xelatex\n"
      "RERUNBIB = \"No file.*\\\ .bbl|Citation.*undefined\"\n"
      "RERUNINDEX = \"No file.*\\\ .ind\"\n\n"

      "PDFS=$(wildcard figures/*.pdf)\n"
      "JPGS=$(patsubst %.pdf, %.jpg, $(PDFS))\n"
      "EPSS=$(patsubst %.pdf, %.eps, $(PDFS))\n"
      "CONVERT = convert -density 300 -resize 33% -background white -flatten\n\n"

      "MASTER = " str ".pdf\n" 
      "DEPENDS = $(TARGET).tex\n\n"
      "$(MASTER): $(DEPENDS)\n\n"
  
      "%.tex: %.rnw\n"
      "             echo \"library(pgfSweave); setCacheDir('cache'); pgfSweave(\\\"$<\\\")\" | R --no-save --no-restore\n\n"
      "             echo \"Stangle(\\\"$<\\\")\" | R --no-save --no-restore\n\n"
    ;;  "       echo \"library(pgfSweave); setCacheDir('cache'); pgfSweave(\\\"$<\\\", graphics.only=T,compile.tex=F,pdf=F)\" | R --no-save --no-restore\n\n"
    ;;  "           echo \"library(cacheSweave); library(highlight); setCacheDir('cache'); Sweave(\\\"$<\\\", driver = HighlightWeaveLatex(boxes=T,bg=rgb(255,255,204,max=255)))\" | R --no-save --no-restore \n"
    ;;  "             echo \"library(cacheSweave); setCacheDir('cache'); Sweave(\\\"$<\\\", driver = cacheSweaveDriver)\" | R --no-save --no-restore\n\n"
    ;;  "           echo \"Stangle(\\\"$<\\\")\" | R --no-save --no-restore\n\n"
    ;;  "           echo \"sed s/,.size=scriptsize//g \\\"$<\\\" > junk\" \n"
    ;;  "           echo \"Stangle(\\\"junk\\\",output=\\\"$(TARGET).R\\\")\" | R --no-save --no-restore\n\n"
    ;;  "           echo \"rm(junk)\" \n"
 
      "$(TARGET).pdf: $(TEX)\n"
      "     $(LATEX) $(LATEX_ARGS) $(TARGET).tex;\n"
      "     while \\\ egrep -c $(RERUNBIB) $(TARGET).log; \\\ \n"
      "     do \\\ \n"
      "             bibtex $(TARGET); \\\ \n"
      "             $(LATEX) $(LATEX_ARGS) $(TARGET).tex; \\\ \n"
      "     done\n"
      "     while \\\ grep -q \"Rerun to get cross-references right.\" \\\ \n"
      "     $(TARGET).log; \\\ \n"
      "     do \\\ \n"
      "             $(LATEX) $(LATEX_ARGS) $(TARGET).tex; \\\ \n"
      "     done\n"
      "     $(LATEX) $(LATEX_ARGS) $(TARGET).tex;\n\n"
  
      "figs: $(JPGS) $(EPSS)\n\n"

      "%.jpg: %.pdf\n"
      "             @echo ** Building jpg images from pdf versions**\n"
      "             $(CONVERT) $< $@\n\n"

      "%.eps: %.pdf\n"
      "             pdf2ps -dLanguageLevel=3 $< $@\n\n"

      "figures::\n" 
      "             for image_file in $(wildcard figures/*.pdf); \\\ \n"
      "             do \\\ \n"
      "                             convert -density 300 -quality 100 $${image_file} $${image_file}.jpg; \\\ \n"
      "             done;\n\n"

      "             for image_file in $(wildcard figures/*.pdf); \\\ \n"
      "             do \\\ \n"
      "                             convert -density 300 -quality 100 $${image_file} $${image_file}.tiff; \\\ \n"
      "             done;\n\n"

      "             for image_file in $(wildcard figures/*.pdf); \\\ \n"
      "             do \\\ \n"
      "                             pdftops -eps -level3 $${image_file}; \\\ \n"
      "             done;\n\n"

      "zip:\n"
      "             zip $(TARGET).zip $(TARGET).pdf *.R figures/*.pdf figures/*.jpg figures/*.eps \n"

      "clean:\n"
      "     rm *.toc *.aux *.pdf *.ps *.eps *.log *.lof *.bib *.bbl *.blg *.dvi *.tex *.map\n"
  
      )

    ;;-- xelatex template ########################################################-------------------------------------------------------------------------------------
    (define-skeleton xelatex-rnw-skeleton
      "Inserts a basic LaTeX Noweb skeleton into the current buffer."
      "Document title: "
      "\\title{" str "}\n"
      "\\documentclass[a4paper]{article}\n"
      "\\usepackage[T1]{fontenc}        %for specifying any fonts\n"
      "\\usepackage{calligra}\n"
      "\\usepackage{rotating}           %for sideways tables\n"
      "\\usepackage{marvosym}\n"
      "\\usepackage{listings}                   %provides lstset for formating inserted computer code\n"
      "\\usepackage{tabularx}           %for tables\n"
      "\\usepackage{color,graphicx}\n"
      "\\usepackage{tikz}\n"
      "\\usetikzlibrary{backgrounds}\n"
      "\\usetikzlibrary{shadows}\n"
      "\\usepackage{wrapfig}\n"
      "\\usepackage[lmargin=1.75cm,rmargin=1.5cm, tmargin=1.5cm, a4paper]{geometry}\n"
      "%-----Define Provision for bibliography-----------\n"
      "\\usepackage{natbib}\n"
      "\\usepackage{bibentry}\n"
      "%-------------------------------------------------\n"
      "\\usepackage{bbding}\n"
      "%---Define some colors--------------------------\n"
      "\\definecolor{backgroundColor}{HTML}{CC3300}\n"
      "\\definecolor{linkcolour}{HTML}{393939} %{FF0080}    %light purple link for the email\n"
      "\\definecolor{shade}{HTML}{D4D7FE}           %light blue shade\n"
      "\\definecolor{text1}{HTML}{2b2b2b}           %text is almost black\n"
      "\\definecolor{headings}{HTML}{0099e3}        %light blue\n"
      "\\definecolor{lightgray}{gray}{0.9}          %light gray\n"
      "\\definecolor{rinput}{HTML}{FF0000}     %dark blue\n"
      "\\definecolor{routput}{HTML}{033197}     %dark blue\n"
      "\\definecolor{rbackground}{HTML}{FFFFCC}\n"
      "%-------------------------------------------------\n"
      "\\usepackage{hyperref}\n"
      "\\hypersetup{colorlinks,breaklinks,urlcolor=linkcolour,linkcolor=linkcolour, citecolor=routput}\n"
      "\\renewcommand*\\sfdefault{lmssq}\n"
      "%-Redefine the section title formats--------------\n"
      "\\usepackage{titlesec}\n"
      "\\titleformat{\\section}{\\Large\\sf\\bfseries\\raggedright\\color{headings}\\thesection. }{}{0em}{}[\\titlerule]\n"
      "\\titlespacing{\\section}{0pt}{3pt}{3pt}\n"
      "\\titleformat{\\subsection}{\\large\\sf\\bfseries\\itshape\\raggedright\\color{headings}\\thesubsection. }{}{0em}{}\n"
      "\\titlespacing{\\subsection}{0pt}{3pt}{3pt}\n"
      "\\titleformat{\\subsubsection}{\\normalsize\\sf\\bfseries\\itshape\\raggedright\\color{headings}\\thesubsubsection. }{}{0em}{}\n"
      "\\titlespacing{\\subsubsection}{0pt}{3pt}{3pt}\n"
      "%-------------------------------------------------\n"
      "%---Define a new list style-----------------------\n"
      "\\newenvironment{my_itemize}\n"
      "\{\\begin{list}{\\labelitemi}{\\leftmargin=1em}\n"
      "\}\n"
      "\{\\end{list}}\n"
      "%-------------------------------------------------\n"
      "\\usepackage{eso-pic}\n"
      "%--Put a silhouette at the bottom of the page-----\n"
      "\\newcommand\\BackgroundPic{\n"
      "\\put(130,-335){\n"
      "\\parbox[b][\\paperheight]{\\paperwidth}{%\n"
      "\\vfill\n"
      "\\centering\n"
      "\\includegraphics{/home/murray/Work/Resume/Murray/Biostatistician/seal_silhouette.jpg}%\n"
      "\\vfill\n"
      "\}}}\n"
      "%-------------------------------------------------\n"
      "%--Put a blue bar on the left hand side of the page---\n"
      "\\newcommand\\SidePic{\n"
      "\\put(-30,\\pageheight){\n"
      "\\includegraphics[width=23mm, height=31cm]{/home/murray/Work/Resume/blueSide.png}\n"
      "\\hspace{-2mm}{\\color{gray}\\rule{.5mm}{300mm}}{\\color{black}\\rule{.25mm}{300mm}}\n"
      "\}}\n"
      "%-------------------------------------------------\n"
      "%--Place   DRAFT ONLY  on each page---------------\n"
      "\\usepackage{fontspec}\n"
      "\\newcommand\\DraftWord{\n"
      "\\AtTextCenter{%\n"
      "\\makebox(0,0)[c]{\\resizebox{\\textwidth}{!}{%\n"
      "\\rotatebox{45}{\\textsf{\\textbf{\\color{lightgray}{\\fontspec[ExternalLocation=/home/murray/.fonts/]{angelina.TTF}\\fontsize{80pt}{0pt}\\selectfont Draft Only}}}}\n"
      "\}}\n"
      "\}\n"
      "\}\n"
      "%-------------------------------------------------\n"
      "\\pretolerance=2000\n"
      "\\tolerance=2000\n"
      "%\\usepackage[noae]{/usr/local/lib/R/share/texmf/Sweave}\n"
      "\\usepackage[noae]{Sweave}\n"
      "%--Alter the default format of the R code/output--\n"
      "\\DefineVerbatimEnvironment{Sinput}{Verbatim}{fontsize=\\scriptsize,fontshape=sl,formatcom={\\color{rinput}}}\n"
      "\\DefineVerbatimEnvironment{Soutput}{Verbatim}{\\vspace{-2em},fontsize=\\scriptsize,formatcom={\\color{routput}}}\n" 
      "\\DefineVerbatimEnvironment{Scode}{Verbatim}{fontshape=sl,formatcom={\\color{headings}}}\n" 
      "\\fvset{listparameters={\\setlength{\\topsep}{1em}}}\n"
      "\\renewenvironment{Houtput}{%\n"
      " \\begin{scriptsize}\n"
      "    \\color{routput}\n"
      "    \\par\n"
      "    \\tikzexternaldisable\n"
      "    \\begin{tikzpicture}\n"
      "      \\node[fill=rbackground,rectangle,minimum width=0.9\\textwidth] (m)\n"
      "      \\bgroup\\begin{minipage}{0.85\\textwidth}%\n"
      "}\n"
      "{%\n"
      "  \\end{minipage}\\egroup;\n"
      "  \\draw[dashed] (m.south west) rectangle (m.north east);\n"
      "  \\end{tikzpicture}\n"
      "  \\end{scriptsize}\n"
      "\\\\ \n" 
      "}\n"

      "\\definecolor{highlightBg}{rgb}{1,1,0.8}\n"
      "\\definecolor{highlightBorder}{rgb}{0,0,0}\n"

      "\\renewenvironment{Hchunk}{% \n"
      " \\color{routput}\n"
      " \\par\n"
      " \\begin{tikzpicture}\n"
      "  \\node[fill=rbackground,rectangle,minimum width=0.9\\textwidth] (m)\n"
      "  \\bgroup\\begin{minipage}{0.85\\textwidth}%\n"
      "}{%\n"
      "  \\end{minipage}\\egroup;\n"
      "  \\draw[dashed] (m.south west) rectangle (m.north east);\n"
      "  \\end{tikzpicture}\\\\ \n" 
      "}\n"

      "%\\newenvironment{elaboration}{%\n"
      "%  \\par\n"
      "%  \\begin{tikzpicture}\n"
      "%  \\node[fill=rbackground,rectangle,minimum width=0.9\textwidth] (m)\n"
      "%  \\bgroup\\begin{minipage}{0.85\\textwidth}%\n"
      "% }{%\n"
      "%  \\end{minipage}\\egroup;\n"
      "%  \\draw[dashed] (m.south west) rectangle (m.north east);\n"
      "%  \\end{tikzpicture}\\\\ \n"
      "% }\n"

      "%\\makeatletter\n"
      "%\\renewenvironment{Schunk}{\\begin{elaboration}}{\\end{elaboration}}\n"
      "%\\makeatother\n"

      "%\\renewenvironment{Schunk}{\\vspace{\\topsep}}{\\vspace{\\topsep}}\n"
      "%-------------------------------------------------\n"
      "%--Change the format of the captions--------------\n"
      "% Different font in captions\n"
      "\\newcommand{\\captionfonts}{\\small\\sf}\n"
      "\\makeatletter  % Allow the use of @ in command names\n"
      "\\long\\def\\@makecaption#1#2{%\n"
      "\\vskip\\abovecaptionskip\n"
      "\\sbox\\@tempboxa{{\\captionfonts #1: \\em#2}}%\n"
      "\\ifdim \\wd\\@tempboxa >\\hsize\n"
      "{\\captionfonts #1: \\em#2\\par}\n"
      "\\else\n"
      "\\hbox to\\hsize{\\hfil\\box\\@tempboxa\\hfil}%\n"
      "\\fi\n"
      "\\vskip\\belowcaptionskip}\n"
      "\\makeatother   % Cancel the effect of \\makeatletter\n"
      "%-------------------------------------------------\n"
      "%--Change the page formatting---------------------\n"
      "% Change the format of the page numbers\n"
      "\\usepackage{fancyhdr}\n"
      "\\pagestyle{fancy}\n"
      "\\fancyhf{} % clear all header and footer fields\n"
      "\\fancyhead[RE,LO]{\\hfill\\bfseries\\sf \\thepage}\n"
      "\\fancyfoot[RE,LO]{\\hfill\\bfseries\\sf \\thepage}\n"
      "\\renewcommand{\\headrulewidth}{0pt}\n"
      "%-------------------------------------------------\n"
      "%--Change the name used for the table of contents-\n"
      "\\renewcommand{\\contentsname}{Table of contents}\n"
      "%-------------------------------------------------\n"

      "\\setlength\\parindent{0pt}\n"
      "\\setmonofont[Scale=MatchLowercase, ExternalLocation=\\string~/Dropbox/Config/Fonts/]{DejaVuSansMono.ttf}\n"
      "%\\setmonofont[Scale=MatchLowercase]{DejaVu Sans Mono}\n"
      "\\renewcommand{\\hlcomment}[1]{\\textcolor[HTML]{3C802C}{#1}}%\n"
      "\\renewcommand{\\hlstring}[1]{\\textcolor[HTML]{ED7722}{#1}}%\n"
      "\\renewcommand{\\hlfunctioncall}[1]{\\textcolor[HTML]{053369}{#1}}%\n"
      "\\renewcommand{\\hlnumber}[1]{\\textcolor[HTML]{0F20F6}{#1}}%\n"
      "\\renewcommand{\\hlkeyword}[1]{\\textcolor[HTML]{AA1F63}{\\textbf{#1}}}%\n"
      "\\renewcommand{\\hlargument}[1]{\\textcolor[HTML]{053369}{#1}}%\n"

      "\\setbox\\hlnormalsizeboxopenbrace=\\hbox{\\begin{scriptsize}\\verb.{.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxclosebrace=\\hbox{\\begin{scriptsize}\\verb.}.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxlessthan=\\hbox{\\begin{scriptsize}\\verb.<.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxdollar=\\hbox{\\begin{scriptsize}\\verb.$.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxunderscore=\\hbox{\\begin{scriptsize}\\verb._.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxand=\\hbox{\\begin{scriptsize}\\verb.&.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxhash=\\hbox{\\begin{scriptsize}\\verb.#.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxat=\\hbox{\\begin{scriptsize}\\verb.@.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxbackslash=\\hbox{\\begin{scriptsize}\\verb.\\.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxgreaterthan=\\hbox{\\begin{scriptsize}\\verb.>.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxpercent=\\hbox{\\begin{scriptsize}\\verb.%.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxhat=\\hbox{\\begin{scriptsize}\\verb.^.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxsinglequote=\\hbox{\\begin{scriptsize}\\verb.'.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxbacktick=\\hbox{\\begin{scriptsize}\\verb.`.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxhat=\\hbox{\\begin{scriptsize}\\verb.^.\\end{scriptsize}}%\n"

      "\\begin{document}\n"
      "\\SweaveOpts{prefix.string=figures/fig,keep.source=FALSE}\n"
      "\\sf\n"
      "\\AddToShipoutPicture{\\BackgroundPic}\n"
      "\\AddToShipoutPicture{\\SidePic}\n"
      "\\AddToShipoutPicture{\\DraftWord}\n"
      "%<<Setcache - THIS CODE SHOULD BE IGNORED, echo=F>>=\n"
      "%# The following step requires the cacheSweave package\n"
      "%setCacheDir(\"cache\")\n"
      "%reSQL<-TRUE\n"
      "%@\n\n" 

      "\\lstset{basicstyle=\\small\\ttfamily,columns=fixed,numbers=left,numberstyle=\\tiny,xleftmargin=3ex,xrightmargin=3ex,frame=lines,float=htb!}\n"
      "\n" _ "\n\n"
      "<<Rwidth, echo=FALSE, results=\"hide\">>=\n"
      "options(width=110)\n"
      "@\n\n"
      "\\noindent\\begin{minipage}[t]{\\linewidth}{%centering\n"
      "{\\noindent\\sffamily\\bfseries\\Huge " str "\n"
      "}\\\\[1em]\n"
      "\\large{Murray Logan}\\\\ \n"
      "\\normalsize\\textit{\\today}\n"
      "\\end{minipage}\\\\ \n" 

      "\\rule{\\linewidth}{2pt}\\\\[2pt]\n"
  
      "\\titleformat{\\section}{\\Large\\sf\\bfseries\\raggedright\\color{headings}}{}{0em}{}[\\titlerule]\n"
      "\\noindent\n"
      "{\\tikzexternaldisable\n"
      "\\begin{tikzpicture}\n"
      "\\node [fill=shade,rounded corners=5pt]\n"
      "{\n"
      "\\begin{minipage}[t]{\\textwidth}\n"  
      "\\tableofcontents\n"
      "\\end{minipage}\n"
      "};\n"
      "\\end{tikzpicture}\n"
      "}\n"
      "\\titleformat{\\section}{\\Large\\sf\\bfseries\\raggedright\\color{headings}\\thesection. }{}{0em}{}[\\titlerule]\n"
      "\\section{Data importation and preparation}\n"
      "\\subsection{Read in data}\n"
      "<<ReadData>>=\n"
      "data <- read.table('data.csv', header=T, sep=',', strip.white=T)\n"
      "@\n"
      "\\subsection{Prepare data}\n"
      "\\noindent\n"
      "{\\tikzexternaldisable\n"
      "\\begin{tikzpicture}\n"
      "\\node [fill=shade,rounded corners=5pt]\n"
      "{\n"
      "\\begin{minipage}[t]{\\textwidth}\n"  
      "\\textbf{Conclusions}.\n"
      "\\end{minipage}\n"
      "};\n"
      "\\end{tikzpicture}}\n"

      "\\addcontentsline{toc}{section}{References and additional reading}\\titleformat{\\section}{\\Large\\sf\\bfseries\\raggedright\\color{headings}}{}{0em}{}[\\titlerule]\n"
      "\\bibliographystyle{/home/murray/Work/References/ecology}\n"
      "\\bibliography{/home/murray/Work/References/References}\n" 
      "~\\\\[2em]"
      "\\addcontentsline{toc}{section}{Appendices}\n"
      "\\appendix{\\Large\\sf\\bfseries\\raggedright\\color{headings} Appendicies \\\\[0.3em]\\titlerule\\\\[0.1em]}\n"
      "\\titleformat{\\subsection}{\\large\\sf\\bfseries\\itshape\\raggedright\\color{headings}\\Alph{subsection}. }{}{0em}{}\n"
      "\\renewcommand{\\thesubsection}    {\\Alph{subsection}}\n"
      "\\subsection{Production notes}\n"
      "\\noindent This document was produced using \\LaTeX~ and \\Sexpr{print(version$version.string)} via Sweave, on a system:$\\Sexpr{print(version$platform)}$.\n"
      "The complete annotated R syntax is in the accompanying " name ".R file.\n"

      "%<<CreateRFile - THIS CODE SHOULD BE IGNORED, echo=FALSE>>=\n"
      "%Stangle('"name ".rnw')\n"
      "%@\n" 
      "\\end{document}\n")
    ;;------------END OF R-xelatex-----------------------------------------------------------------------------------------------------------------------------------



    ;; ----Start of elsarticle-R---------------------------------------------------
    (defun elsarticle-R()
      ;;  (interactive "sfilename:?")
      (interactive)
      (setq var (split-string (read-from-minibuffer "Enter filename: "nil nil nil nil nil nil) " "))
      (setq name (car var))
      (setq author (read-string "Document author: " nil nil nil nil))
      (shell-command "mkdir figures")
      (shell-command "mkdir cache")
      (shell-command "mkdir data")
      (shell-command "mkdir scripts")
      (shell-command "mkdir fonts")
      (find-file "Makefile")
      (elsarticle-R-makefile name)
      (save-buffer)
      (kill-buffer "Makefile")
      (find-file (concat name ".Rmd"))
      (elsarticle-R-skeleton)
      (save-buffer)
      )

    ;;--------------------------------------------------------------------------------------------


    ;; ----Start of small-markdown-knitr-pandoc---------------------------------------------------
    (defun small-markdown-knitr-pandoc ()
      ;;  (interactive "sfilename:?")
      (interactive)
      (setq var (split-string (read-from-minibuffer "Enter filename: "nil nil nil nil nil nil) " "))
      (setq name (car var))
      (setq author (read-string "Document author: " nil nil nil nil))
      (shell-command "mkdir figures")
      (shell-command "mkdir cache")
      (shell-command "mkdir data")
      (shell-command "mkdir scripts")
      (shell-command "mkdir fonts")
      (find-file "Makefile")
      (markdown-knitr-pandoc-makefile name)
      (save-buffer)
      (kill-buffer "Makefile")
      (find-file (concat name ".Rmd"))
      (markdown-knitr-pandoc-skeleton)
      (save-buffer)
      )

    ;;--------------------------------------------------------------------------------------------

    ;; ----Start of large-markdown-knitr-pandoc---------------------------------------------------
    (defun large-markdown-knitr-pandoc ()
      ;;  (interactive "sfilename:?")
      (interactive)
      (setq var (split-string (read-from-minibuffer "Enter filename: "nil nil nil nil nil nil) " "))
      (setq name (car var))
      (setq author (read-string "Document author: " nil nil nil nil))
      (shell-command "mkdir figures")
      (shell-command "mkdir cache")
      (shell-command "mkdir data")
      (shell-command "mkdir scripts")
      (shell-command "mkdir fonts")
      (find-file "Makefile")
      (markdown-knitr-pandoc-makefile name)
      (save-buffer)
      (kill-buffer "Makefile")
    ;;  (find-file (concat name ".Rmd"))
    ;;  (markdown-knitr-pandoc-skeleton)
    ;;  (save-buffer)
      (find-file (concat "01-" name "-import.Rmd"))
      (markdown-knitr-pandoc-skeleton-01)
      (save-buffer)
      (find-file "helperFunctions.R")
      (markdown-knitr-pandoc-skeleton-helperFunctions)
      (save-buffer)
      (find-file (concat "02-" name "-processing.Rmd"))
      (markdown-knitr-pandoc-skeleton-02)
      (save-buffer)
      (find-file (concat "05-" name "-analysis.Rmd"))
      (markdown-knitr-pandoc-skeleton-05)
      (save-buffer)
      (save-buffer)
      (find-file (concat "07-" name "-summaries.Rmd"))
      (markdown-knitr-pandoc-skeleton-07)
      (save-buffer)
      (find-file (concat "09-" name "-appendix.Rmd"))
      (markdown-knitr-pandoc-skeleton-09)
      (save-buffer)
      (find-file "templates")
      (markdown-knitr-templates)
      (save-buffer)
      )


    (define-skeleton elsarticle-R-makefile 
      "Inserts a basic elsarticle with R mardown and makefile skeleton into a buffer."
      ;;"filename: "
      ;;(find-file "Makefile")
      "\n"
      "## Notes\n"
      "##  Must be able to process with latex and pdflatex\n\n"
      "## Usage\n"
      "##  make -i\n"
      "###   output: pdf document\n\n"
      ".SUFFIXES: .Rmd .tex .pdf .dvi .ps\n"
      "HIDE=default\n"
      "RmdFILES = $(wildcard *.Rmd)\n"
      "MD = $(patsubst %.Rmd,%.md,$(RmdFILES)) #$(wildcard *.md)\n"
      "TEX = $(patsubst %.Rmd,%.tex,$(RmdFILES))\n\n"
      "TARGET = " name "\n"
      ;;"LATEX_ARGS=--interaction=nonstopmode --output-driv=\"xdvipdfmx -vv -V 4\"\n"
    ;;  "PANDOC_ARGS=-s -S -i --template=template -H end.template -B start.template -A end1.template --mathjax --bibliography='/home/murray/Dropbox/Work/Resources/References/References.bib' --reference-links \n"
      "PANDOC_PDFLATEX_ARGS = -s --template='/home/murray/Dropbox/Work/Resources/Scripts/pandoc/elsarticle' --bibliography='/home/murray/Dropbox/Work/Resources/References/References.bib' --reference-links -N --latex-engine=pdflatex #--csl '/home/murray/Dropbox/Work/Resources/References/oecologia.csl' \n" 
      "PDFLATEX_ARGS=--interaction=nonstopmode --output-driv=\"xdvipdfmx -vv -V 4\"\n"
      "PANDOC=pandoc\n"
  
      "PDFS=$(wildcard figures/*.pdf)\n"
      "JPGS=$(patsubst %.pdf, %.jpg, $(PDFS))\n"
      "EPSS=$(patsubst %.pdf, %.eps, $(PDFS))\n"
      "CONVERT = convert -density 300 -resize 33% -background white -flatten\n\n"
      "#KNITRMD=$(patsubst %.Rmd, %_knit_.Rmd, $(RmdFILES))\n"

      "MASTER = " str ".html\n" 
      "DEPENDS = $(TARGET).md\n\n"

      ".SECONDARY:  #this is in place to prevent make from removing intermediatory files (like *.Lmd)\n"

      "%.Lmd: %.Rmd\n"
      "             echo $@\n"
      "             $(eval KNITRMD := $(patsubst %.Rmd, %_knit_.rmd, $<))\n"
      "             echo \"library(knitr); purl(\\\"$<\\\")\" | R --no-save --no-restore\n"
      "             cat *.R > all.R\n"
      "             cp $< $(KNITRMD)\n"
      "             sed -i -e '/<top>/{r /home/murray/Dropbox/Work/Resources/Scripts/knitHooksLatex' -e 'd}' $(KNITRMD)\n"  
      "             echo \"library(knitr); knit(\\\"$(KNITRMD)\\\",output=\\\"$@\\\")\" | R --no-save --no-restore\n"       
      "             sed -i \"s/caption{Table [0-9]*\.\ /caption{/g\" $@ #remove table counter - latex will do this\n\n"

      "%.tex: %.Lmd\n"
      "             $(eval TMP := $(patsubst %.Lmd, %.lmd, $<))\n"
      "             echo $(TMP)\n"
      "             cp $< $(TMP)\n"
      "ifeq ($(HIDE),TRUE)\n"
      "      sed -i '/<div class=\\\"hidden\\\".*>/,/^<\\/div class=\\\"hidden\\\">/d' $(TMP)\n"
      "endif\n"
      "             $(PANDOC) $(PANDOC_PDFLATEX_ARGS) -f 'markdown' *.lmd -o $(TARGET).tex\n\n"

      "pdf: $(TEX) #$(TARGET).tex\n"
      "             sed -i 's/includegraphics{images/includegraphics\\[width=\\\\maxwidth\\]{images/g' $(TARGET).tex\n"
      "             sed -i 's/\\\\centering/\\\\centering\\\\scriptsize/g' $(TARGET).tex #indicate smaller font for tables\n" 
      "             pdflatex $(PDFLATEX_ARGS) $(TARGET).tex\n"
      "             pdflatex $(PDFLATEX_ARGS) $(TARGET).tex\n"
      "             pdflatex $(PDFLATEX_ARGS) $(TARGET).tex\n\n"

  
      "figs: $(JPGS) $(EPSS)\n\n"

      "%.jpg: %.pdf\n"
      "             @echo ** Building jpg images from pdf versions**\n"
      "             $(CONVERT) $< $@\n\n"

      "%.eps: %.pdf\n"
      "             pdf2ps -dLanguageLevel=3 $< $@\n\n"

      "figures::\n" 
      "             for image_file in $(wildcard figures/*.pdf); \\\ \n"
      "             do \\\ \n"
      "                             convert -density 300 -quality 100 $${image_file} $${image_file}.jpg; \\\ \n"
      "             done;\n\n"

      "             for image_file in $(wildcard figures/*.pdf); \\\ \n"
      "             do \\\ \n"
      "                             convert -density 300 -quality 100 $${image_file} $${image_file}.tiff; \\\ \n"
      "             done;\n\n"

      "             for image_file in $(wildcard figures/*.pdf); \\\ \n"
      "             do \\\ \n"
      "                             pdftops -eps -level3 $${image_file}; \\\ \n"
      "             done;\n\n"

      "clean:\n"
      "     rm *.toc *.aux *.pdf *.ps *.eps *.log *.lof *.bib *.bbl *.blg *.dvi *.tex *.map *.md\n"
  
      "zip:\n"
      "             zip $(TARGET).zip $(TARGET).html *.R data/*.* figures/*.* scripts/*.* fonts/*.*\n"
      )


    (define-skeleton markdown-knitr-pandoc-makefile 
      "Inserts a basic markdown, knitr and pandoc makefile skeleton into a buffer."
      ;;"filename: "
      ;;(find-file "Makefile")
      "\n"
      "## Usage\n"
      "##  make html -i HIDE=TRUE\n"
      "###   output: html with hidden content\n"
      "##  make html -i\n"
      "###   output: html with revealed content\n"
      "##  make pdf -i HIDE=TRUE\n"
      "###   output: pdf with hidden content\n"
      "##  make pdf -i\n"
      "###   output: pdf with revealed content\n\n"
      ".SUFFIXES: .Rmd .html .rnw .tex .pdf .dvi .ps\n"
      "HIDE=default\n"
      "RmdFILES = $(wildcard *.Rmd)\n"
      "MD = $(patsubst %.Rmd,%.md,$(RmdFILES)) #$(wildcard *.md)\n"
      "TEX = $(patsubst %.Rmd,%.tex,$(RmdFILES))\n"
      "HMD = $(patsubst %.Rmd,%.hmd,$(RmdFILES))\n"
      "DOCX = $(patsubst %.Rmd,%.Dmd,$(RmdFILES))\n\n"
      "TARGET = " name "\n"
      ;;"LATEX_ARGS=--interaction=nonstopmode --output-driv=\"xdvipdfmx -vv -V 4\"\n"
    ;;  "PANDOC_ARGS=-s -S -i --template=template -H end.template -B start.template -A end1.template --mathjax --bibliography='/home/murray/Dropbox/Work/Resources/References/References.bib' --reference-links \n"
      "PANDOC_ARGS=-s -S -i --template='/home/murray/Dropbox/Work/Resources/Scripts/pandoc/template' --bibliography='/home/murray/Dropbox/Work/Resources/References/References.bib' --reference-links \n"
      "PANDOC_SC_ARGS =-s -S -i --template='/home/murray/Dropbox/Work/Resources/Scripts/pandoc/template_sc' --bibliography='/home/murray/Dropbox/Work/Resources/References/References.bib'  --reference-links  --self-contained #--csl '/home/murray/Dropbox/Work/Resources/References/oecologia.csl'\n"
      "PANDOC_XELATEX_ARGS = -s --template='/home/murray/Dropbox/Work/Resources/Scripts/pandoc/default' --bibliography='/home/murray/Dropbox/Work/Resources/References/References.bib' --reference-links -N --latex-engine=xelatex --toc #--csl '/home/murray/Dropbox/Work/Resources/References/oecologia.csl' \n" 
      "XELATEX_ARGS=--interaction=nonstopmode --output-driv=\"xdvipdfmx -vv -V 4\"\n"
      "XELATEX_ARGS=--interaction=batchmode\n"
      "PANDOC_DOC_ARGS=  -s -S -i --bibliography='/home/murray/Dropbox/Work/Resources/References/References.bib'  #--csl '/home/murray/Dropbox/Work/Resources/References/oecologia.csl' --reference-docx='/home/murray/Dropbox/Work/Resources/Templates/AIMS.docx'\n\n"
  
      "PANDOC=pandoc\n"
  
      "PDFS=$(wildcard figures/*.pdf)\n"
      "JPGS=$(patsubst %.pdf, %.jpg, $(PDFS))\n"
      "EPSS=$(patsubst %.pdf, %.eps, $(PDFS))\n"
      "CONVERT = convert -density 300 -resize 33% -background white -flatten\n\n"
      "#KNITRMD=$(patsubst %.Rmd, %_knit_.Rmd, $(RmdFILES))\n"

      "MASTER = " str ".html\n" 
      "DEPENDS = $(TARGET).md\n\n"

      ".SECONDARY:  #this is in place to prevent make from removing intermediatory files (like *.Lmd)\n"
      "%.Dmd: %.Rmd\n"
      "             echo $@\n"
      "             $(eval KNITRMD := $(patsubst %.Rmd, %_knit_.dmd, $<))\n"
      "             cp $< $(KNITRMD)\n"
      "             sed -i 's/<top>//g' $(KNITRMD)\n"
      "             sed -i 's/\\\({r.*\\\)}/\\\1, dpi=400}/g' $(KNITRMD)\n"
      "             #echo \"library(knitr); purl(\\\"$<\\\")\" | R --no-save --no-restore\n"
      "             echo \"library(knitr); knit(\\\"$(KNITRMD)\\\",output=\\\"$@\\\")\" | R --no-save --no-restore\n\n"

      "docx: $(DOCX)\n"
      "             $(PANDOC) $(PANDOC_DOC_ARGS) *.Dmd -o $(TARGET).docx\n\n"

      "%.Lmd: %.Rmd\n"
      "             echo $@\n"
      "             $(eval KNITRMD := $(patsubst %.Rmd, %_knit_.rmd, $<))\n"
      "             echo \"library(knitr); purl(\\\"$<\\\")\" | R --no-save --no-restore\n"
      "             cat *.R > all.R\n"
      "             cp $< $(KNITRMD)\n"
      "             sed -i \"s/='png'/='pdf'/g\" $(KNITRMD) #produce pdf graphics\n"
      "             sed -i \"s/='html'/='latex'/g\" $(KNITRMD) #produce latex tables\n"
      "             sed -i \"s/sanitize.colnames.function=NULL/sanitize.colnames.function=bold.names/g\" $(KNITRMD) #produce latex tables\n"
      "             sed -i -e '/<top>/{r /home/murray/Dropbox/Work/Resources/Scripts/knitHooksLatex' -e 'd}' $(KNITRMD)\n"  
      "             echo \"library(knitr); knit(\\\"$(KNITRMD)\\\",output=\\\"$@\\\")\" | R --no-save --no-restore\n"       
      "             sed -i \"s/caption{Table [0-9]*\.\ /caption{/g\" $@ #remove table counter - latex will do this\n\n"


      "%.tex: %.Lmd\n"
      "             $(eval TMP := $(patsubst %.Lmd, %.lmd, $<))\n"
      "             echo $(TMP)\n"
      "             cp $< $(TMP)\n"
      "ifeq ($(HIDE),TRUE)\n"
      "      sed -i '/<div class=\\\"hidden\\\".*>/,/^<\\/div class=\\\"hidden\\\">/d' $(TMP)\n"
      "endif\n"
      "             $(PANDOC) $(PANDOC_XELATEX_ARGS) -f 'markdown' *.lmd -o $(TARGET).tex\n\n"

      "pdf: $(TEX) #$(TARGET).tex\n"
      "             sed -i 's/includegraphics{images/includegraphics\\[width=\\\\maxwidth\\]{images/g' $(TARGET).tex\n"
      "             sed -i 's/\\\\centering/\\\\centering\\\\scriptsize/g' $(TARGET).tex #indicate smaller font for tables\n" 
      "             xelatex $(XELATEX_ARGS) $(TARGET).tex\n"
      "             xelatex $(XELATEX_ARGS) $(TARGET).tex\n"
      "             xelatex $(XELATEX_ARGS) $(TARGET).tex\n\n"

      "%.Hmd: %.Rmd\n"
      "             $(eval KNITRMD := $(patsubst %.Rmd, %_knit_.rmd, $<))\n"
      "             echo \"library(knitr); purl(\\\"$<\\\")\" | R --no-save --no-restore\n"
      "             cat *.R > all.R\n"
      "             cp $< $(KNITRMD)\n"  
      "             sed -i -e '/<top>/{r /home/murray/Dropbox/Work/Resources/Scripts/knitHooks' -e 'd}' $(KNITRMD)\n"
      "             echo \"library(knitr); knit(\\\"$(KNITRMD)\\\",output=\\\"$@\\\")\" | R --no-save --no-restore\n\n"             

      "%.hmd: %.Hmd\n"
      "             $(eval TMP := $(patsubst %.Hmd, %_knit_.hmd, $<))\n"
      "             cp $< $(TMP)\n"
      "ifeq ($(HIDE),TRUE)\n"
      "      sed -i '/<div class=\\\"hidden\\\".*>/,/^<\\/div class=\\\"hidden\\\">/d' $(TMP)\n"
      "endif\n\n"

      "html: $(HMD)\n"
      "             $(PANDOC) $(PANDOC_ARGS) *.hmd > $(TARGET).html\n"
      "             sed -i -e '/?config=TeX-AMS_HTML-full/' -e 'd}' *.hmd\n"
      "             $(PANDOC) $(PANDOC_SC_ARGS) *.hmd > $(TARGET)_sc.html\n\n"
  
      "figs: $(JPGS) $(EPSS)\n\n"

      "%.jpg: %.pdf\n"
      "             @echo ** Building jpg images from pdf versions**\n"
      "             $(CONVERT) $< $@\n\n"

      "%.eps: %.pdf\n"
      "             pdf2ps -dLanguageLevel=3 $< $@\n\n"

      "figures::\n" 
      "             for image_file in $(wildcard figures/*.pdf); \\\ \n"
      "             do \\\ \n"
      "                             convert -density 300 -quality 100 $${image_file} $${image_file}.jpg; \\\ \n"
      "             done;\n\n"

      "             for image_file in $(wildcard figures/*.pdf); \\\ \n"
      "             do \\\ \n"
      "                             convert -density 300 -quality 100 $${image_file} $${image_file}.tiff; \\\ \n"
      "             done;\n\n"

      "             for image_file in $(wildcard figures/*.pdf); \\\ \n"
      "             do \\\ \n"
      "                             pdftops -eps -level3 $${image_file}; \\\ \n"
      "             done;\n\n"

      "clean:\n"
      "     rm *.toc *.aux *.pdf *.ps *.eps *.log *.lof *.bib *.bbl *.blg *.dvi *.tex *.map *.md\n"
  
      "zip:\n"
      "             zip $(TARGET).zip $(TARGET).html *.R data/*.* figures/*.* scripts/*.* fonts/*.*\n"
      )


    (define-skeleton elsarticle-R-skeleton
      "Inserts a basic LaTeX Noweb skeleton into the current buffer."
      "Document title: "
      "---\n"
      "type: review,3p\n"
      "title: '" str "'\n"
      "author:\n"
      "- name: M. Logan\n"
      "  af: aims\n"
      "  affiliation: Australian Institute of Marine Science, PMB No 3, Townsville, Queensland 4810, Australia\n"
      "keyword: Bla, Bla, Bla\n"
      "abstract: |\n"
      " This is the abstract.\n\n"
      " With two paragraphs.\n"
      "...\n\n"
      "<top>\n\n"
      "\n"


      "```{r libraries, echo=FALSE}\n"
      "library(dplyr)\n"
      "library(reshape2)\n"
      "library(ggplot2)\n"
      "library(grid)\n"
      "library(gridExtra)\n"
      "library(lubridate)\n"
      "```\n\n"
  
      "Introduction\n"
      "===================\n\n"

      "Methods\n"
      "===================\n\n"

      "Results\n"
      "===================\n\n"

      "Discussion\n"
      "===================\n\n"

      "References\n"
      "====================\n\n"


    )

    (define-skeleton markdown-knitr-pandoc-skeleton
      "Inserts a basic LaTeX Noweb skeleton into the current buffer."
      "Document title: "
      "% " str "\n"
      "% " author "\n"
      "% " (format-time-string "%d-%m-%Y" (current-time)) "\n\n"
      "<top>\n\n"
      "\n"


      "Preparations\n"
      "===================\n"

      "## Read in data\n\n"
      "```{r, reveal=TRUE}\n"
      "a <- 100\n"
      "a\n"
      "```\n\n"

      "References\n"
      "====================\n"
      "This document was produced from markdown using knitr on `r version$version.string` on a `r version$platform` system.\n\n"

      "```{r, results='markdown'}\n"
      "sessionInfo()\n"
      "```\n\n"

    )

    (define-skeleton markdown-knitr-pandoc-skeleton-01
      "Inserts a basic LaTeX Noweb skeleton into the current buffer."
      "Document title: "
      "% " str "\n"
      "% " author "\n"
      "% " (format-time-string "%d-%m-%Y" (current-time)) "\n\n"
      "<top>\n\n"
      "\n"


      "Data importation\n"
      "===================\n"
      "## Load libraries\n\n"
      "```{r libraries, reveal=TRUE, results='markdown'}\n"
      "source('helperFunctions.R')\n"
      "\n"
      "```\n"
      "## Read in data\n\n"
      "```{r readData, reveal=TRUE, results='markdown'}\n"
      "a <- 100\n"
      "a\n"
      "```\n"
    )

    (define-skeleton markdown-knitr-pandoc-skeleton-helperFunctions
      "Inserts a basic LaTeX Noweb skeleton into the current buffer."
      "Document title: "
      "## The following are helper Functions\n\n"
    )

    (define-skeleton markdown-knitr-pandoc-skeleton-02
      "Inserts a basic LaTeX Noweb skeleton into the current buffer."
      "Document title: "
      "<top>\n\n"
      "\n"

      "Data processing\n"
      "===================\n"
      "## Process the data\n\n"
      "```{r, reveal=TRUE, results='markdown'}\n"
      "a <- 100\n"
      "a\n"
      "```\n"
    )

    (define-skeleton markdown-knitr-pandoc-skeleton-05
      "Inserts a basic LaTeX Noweb skeleton into the current buffer."
      "Document title: "
      "<top>\n\n"
      "\n"

      "Data analysis\n"
      "===================\n"
      "## Read in data\n\n"
      "```{r, reveal=TRUE, results='markdown'}\n"
      "a <- 100\n"
      "a\n"
      "```\n\n"
      "Generalized Additive Mixed Models [GAMMs; @Wood-2006-2006].\n"
    )

    (define-skeleton markdown-knitr-pandoc-skeleton-07
      "Inserts a basic LaTeX Noweb skeleton into the current buffer."
      "Document title: "
      "<top>\n\n"
      "\n"

      "Summaries\n"
      "===================\n"
      "## Read in data\n\n"
      "```{r, reveal=TRUE,results='markdown'}\n"
      "a <- 100\n"
      "a\n"
      "```\n"
    )

    (define-skeleton markdown-knitr-pandoc-skeleton-09
      "Inserts a basic LaTeX Noweb skeleton into the current buffer."
      "Document title: "
      "<top>\n\n"
      "\n"

      "Appendix\n"
      "====================\n"
      "This document was produced from markdown using knitr on `r version$version.string` on a `r version$platform` system.\n\n"
      "```{r, reveal=TRUE,results='markdown'}\n"
      "a <- system('cat all.R',intern=TRUE)\n"
      "a <- gsub('## ----.*','',a)\n"
      "a <- paste(a,collapse='\\n')\n"
      "a<-gsub('\\n\\n\\n\\n\\n','\\n\\n',a)\n"
      "cat(paste(a,collapse='\\n'))\n"

      "```\n"

      "References\n"
      "====================\n"
  


    )

    (define-skeleton markdown-knitr-templates
      "Inserts a basic LaTeX Noweb skeleton into the current buffer."
      "Document title: "
      "## The following are templates that can be pasted into a Rmd file\n\n"
      "### Inserting in-text citations"
      "Generalized Additive Mixed Models [GAMMs; @Wood-2006-2006].\n"
      "### Tables\n"

    )
    ;; ----End of markdown-knitr-pandoc---------------------------------------------------






    (defun knitr-xelatex ()
      ;;  (interactive "sfilename:?")
      (interactive)
      (setq var (split-string (read-from-minibuffer "Enter filename: "nil nil nil nil nil nil) " "))
      (setq name (car var))
      (shell-command "mkdir figures")
      (shell-command "mkdir cache")
      (shell-command "mkdir data")
      (find-file "Makefile")
      (xelatex-knitr-makefile name)
      (save-buffer)
      (kill-buffer "Makefile")
      (find-file (concat name ".rnw"))
      (xelatex-knitr-skeleton)
      (save-buffer)
      )

    (define-skeleton xelatex-knitr-makefile 
      "Inserts a basic noweb xelatex with knitr makefile skeleton into a buffer."
      ;;"filename: "
      ;;(find-file "Makefile")
      ".SUFFIXES: .rnw .tex .pdf .dvi .ps\n"
      "RNWFILES = $(wildcard *.rnw)\n"
      "TEX = $(patsubst %.rnw,%.tex,$(RNWFILES)) #$(wildcard *.tex)\n"
      "TARGET = " name "\n"
      ;;"LATEX_ARGS=--interaction=nonstopmode --output-driv=\"xdvipdfmx -vv -V 4\"\n"
      "LATEX_ARGS=--interaction=batchmode\n"
      ;;  "LATEX_ARGS=\"-interaction=nonstopmode\"\n"
      "LATEX=xelatex\n"
      "RERUNBIB = \"No file.*\\\ .bbl|Citation.*undefined\"\n"
      "RERUNINDEX = \"No file.*\\\ .ind\"\n\n"
  
      "PDFS=$(wildcard figures/*.pdf)\n"
      "JPGS=$(patsubst %.pdf, %.jpg, $(PDFS))\n"
      "EPSS=$(patsubst %.pdf, %.eps, $(PDFS))\n"
      "CONVERT = convert -density 300 -resize 33% -background white -flatten\n\n"

      "MASTER = " str ".pdf\n" 
      "DEPENDS = $(TARGET).tex\n\n"
      "$(MASTER): $(DEPENDS)\n\n"
  
      "%.tex: %.rnw\n"
    ;;  "           echo \"library(pgfSweave); setCacheDir('cache'); pgfSweave(\\\"$<\\\")\" | R --no-save --no-restore\n\n"
      "             echo \"library(knitr); knit(\\\"$<\\\")\" | R --no-save --no-restore\n\n"
    ;;  "           echo \"Stangle(\\\"$<\\\")\" | R --no-save --no-restore\n\n"
      "             echo \"library(knitr); purl(\\\"$<\\\")\" | R --no-save --no-restore\n\n"  
    ;;  "       echo \"library(pgfSweave); setCacheDir('cache'); pgfSweave(\\\"$<\\\", graphics.only=T,compile.tex=F,pdf=F)\" | R --no-save --no-restore\n\n"
    ;;  "           echo \"library(cacheSweave); library(highlight); setCacheDir('cache'); Sweave(\\\"$<\\\", driver = HighlightWeaveLatex(boxes=T,bg=rgb(255,255,204,max=255)))\" | R --no-save --no-restore \n"
    ;;  "             echo \"library(cacheSweave); setCacheDir('cache'); Sweave(\\\"$<\\\", driver = cacheSweaveDriver)\" | R --no-save --no-restore\n\n"
    ;;  "           echo \"Stangle(\\\"$<\\\")\" | R --no-save --no-restore\n\n"
    ;;  "           echo \"sed s/,.size=scriptsize//g \\\"$<\\\" > junk\" \n"
    ;;  "           echo \"Stangle(\\\"junk\\\",output=\\\"$(TARGET).R\\\")\" | R --no-save --no-restore\n\n"
    ;;  "           echo \"rm(junk)\" \n"
 
      "$(TARGET).pdf: $(TEX)\n"
      "     $(LATEX) $(LATEX_ARGS) $(TARGET).tex;\n"
      "     while \\\ egrep -c $(RERUNBIB) $(TARGET).log; \\\ \n"
      "     do \\\ \n"
      "             bibtex $(TARGET); \\\ \n"
      "             $(LATEX) $(LATEX_ARGS) $(TARGET).tex; \\\ \n"
      "     done\n"
      "     while \\\ grep -q \"Rerun to get cross-references right.\" \\\ \n"
      "     $(TARGET).log; \\\ \n"
      "     do \\\ \n"
      "             $(LATEX) $(LATEX_ARGS) $(TARGET).tex; \\\ \n"
      "     done\n"
    ;;  "   $(LATEX) $(LATEX_ARGS) $(TARGET).tex;\n\n"
  
      "figs: $(JPGS) $(EPSS)\n\n"

      "%.jpg: %.pdf\n"
      "             @echo ** Building jpg images from pdf versions**\n"
      "             $(CONVERT) $< $@\n\n"

      "%.eps: %.pdf\n"
      "             pdf2ps -dLanguageLevel=3 $< $@\n\n"

      "figures::\n" 
      "             for image_file in $(wildcard figures/*.pdf); \\\ \n"
      "             do \\\ \n"
      "                             convert -density 300 -quality 100 $${image_file} $${image_file}.jpg; \\\ \n"
      "             done;\n\n"

      "             for image_file in $(wildcard figures/*.pdf); \\\ \n"
      "             do \\\ \n"
      "                             convert -density 300 -quality 100 $${image_file} $${image_file}.tiff; \\\ \n"
      "             done;\n\n"

      "             for image_file in $(wildcard figures/*.pdf); \\\ \n"
      "             do \\\ \n"
      "                             pdftops -eps -level3 $${image_file}; \\\ \n"
      "             done;\n\n"

      "clean:\n"
      "     rm *.toc *.aux *.pdf *.ps *.eps *.log *.lof *.bib *.bbl *.blg *.dvi *.tex *.map\n"
  
      "zip:\n"
      "             zip $(TARGET).zip $(TARGET).pdf *.R figures/*.* \n"
      )

    ;;-- xelatex template ########################################################-------------------------------------------------------------------------------------
    (define-skeleton xelatex-knitr-skeleton
      "Inserts a basic LaTeX Noweb skeleton into the current buffer."
      "Document title: "
      "\\SweaveOpts{background='#FFFFCC',cache.path='cache/',fig.path='figures/fig',fig.align='center',prompt=TRUE, highlight=TRUE,comment=NA, results='markup', par=TRUE}\n"
      "\\title{" str "}\n"
      "\\documentclass[a4paper]{article}\n"
      "\\newif\\iffinished\n"
      "\\finishedtrue\n"
      "\\iffinished\n"
      "\\usepackage[T1]{fontenc}        %for specifying any fonts\n"
      "\\usepackage{calligra}\n"
      "\\usepackage{rotating}           %for sideways tables\n"
      "\\usepackage{marvosym}\n"
      "\\usepackage{listings}                   %provides lstset for formating inserted computer code\n"
      "\\usepackage{tabularx}           %for tables\n"
      "\\usepackage{color,graphicx}\n"
      "\\usepackage[table]{xcolor}\n"
      "\\usepackage{colortbl}\n"
      "\\usepackage{tikz}\n"
      "\\renewcommand{\\familydefault}{\\sfdefault}\n"
      "\\usetikzlibrary{backgrounds}\n"
      "\\usetikzlibrary{shadows}\n"
      "\\usepackage{wrapfig}\n"
      "\\usepackage[lmargin=1.75cm,rmargin=1.5cm, tmargin=1.5cm, a4paper]{geometry}\n"
      "%-----Define Provision for bibliography-----------\n"
      "\\usepackage{natbib}\n"
      "\\usepackage{bibentry}\n"
      "%-------------------------------------------------\n"
      "\\usepackage{bbding}\n"
      "%---Define some colors--------------------------\n"
      "\\definecolor{backgroundColor}{HTML}{CC3300}\n"
      "\\definecolor{linkcolour}{HTML}{393939} %{FF0080}    %light purple link for the email\n"
      "\\definecolor{shade}{HTML}{D4D7FE}           %light blue shade\n"
      "\\definecolor{text1}{HTML}{2b2b2b}           %text is almost black\n"
      "\\definecolor{headings}{HTML}{0099e3}        %light blue\n"
      "\\definecolor{lightgray}{gray}{0.9}          %light gray\n"
      "\\definecolor{rinput}{HTML}{FF0000}     %dark blue\n"
      "\\definecolor{routput}{HTML}{033197}     %dark blue\n"
      "\\definecolor{rbackground}{HTML}{FFFFCC}\n"
      "%-------------------------------------------------\n"
      "\\usepackage{hyperref}\n"
      "\\hypersetup{colorlinks,breaklinks,urlcolor=linkcolour,linkcolor=linkcolour, citecolor=routput}\n"
      "\\renewcommand*\\sfdefault{lmssq}\n"
      "%-Redefine the section title formats--------------\n"
      "\\usepackage{titlesec}\n"
      "\\titleformat{\\section}{\\Large\\sf\\bfseries\\raggedright\\color{headings}\\thesection. }{}{0em}{}[\\titlerule]\n"
      "\\titlespacing{\\section}{0pt}{3pt}{3pt}\n"
      "\\titleformat{\\subsection}{\\large\\sf\\bfseries\\itshape\\raggedright\\color{headings}\\thesubsection. }{}{0em}{}\n"
      "\\titlespacing{\\subsection}{0pt}{3pt}{3pt}\n"
      "\\titleformat{\\subsubsection}{\\normalsize\\sf\\bfseries\\itshape\\raggedright\\color{headings}\\thesubsubsection. }{}{0em}{}\n"
      "\\titlespacing{\\subsubsection}{0pt}{3pt}{3pt}\n"
      "%-------------------------------------------------\n"
      "%---Define a new list style-----------------------\n"
      "\\newenvironment{my_itemize}\n"
      "\{\\begin{list}{\\labelitemi}{\\leftmargin=1em}\n"
      "\}\n"
      "\{\\end{list}}\n"
      "%-------------------------------------------------\n"
      "\\usepackage{eso-pic}\n"
      "%--Put a silhouette at the bottom of the page-----\n"
      "\\graphicspath{{\\string~/Dropbox/Work/Resources/Images/}}\n"
      "\\newcommand\\BackgroundPic{\n"
      "\\put(-10,0){\n"
      "\\parbox[b][\\paperheight]{\\paperwidth}{%\n"
      "\\includegraphics[width=220mm, height=20mm]{header.png}%\n"
      "\\vfill\n"
      "\\includegraphics{footer.png}%\n"
      "\}}}\n"
      "%-------------------------------------------------\n"
      "%--Put a blue bar on the left hand side of the page---\n"
      "%\\newcommand\\SidePic{\n"
      "%\\put(-30,\\pageheight){\n"
      "%\\includegraphics[width=23mm, height=31cm]{/home/murray/Work/Resume/blueSide.png}\n"
      "%\\hspace{-2mm}{\\color{gray}\\rule{.5mm}{300mm}}{\\color{black}\\rule{.25mm}{300mm}}\n"
      "%\}}\n"
      "%-------------------------------------------------\n"
      "%--Place   DRAFT ONLY  on each page---------------\n"
      "\\usepackage{fontspec}\n"
      "\\newcommand\\DraftWord{\n"
      "\\AtTextCenter{%\n"
      "\\makebox(0,0)[c]{\\resizebox{\\textwidth}{!}{%\n"
      "\\rotatebox{45}{\\textsf{\\textbf{\\color{lightgray}{\\fontspec[ExternalLocation=\\string~/Dropbox/Config/Fonts/]{angelina.TTF}\\fontsize{80pt}{0pt}\\selectfont Draft Only}}}}\n"
      "\}}\n"
      "\}\n"
      "\}\n"
      "\\fi\\n"
      "%-------------------------------------------------\n"
      "\\pretolerance=2000\n"
      "\\tolerance=2000\n"
      "%\\usepackage[noae]{/usr/local/lib/R/share/texmf/Sweave}\n"
      "\\usepackage[noae]{Sweave}\n"
      "\\iffinished\n"
      "%--Alter the default format of the R code/output--\n"
      "\\DefineVerbatimEnvironment{Sinput}{Verbatim}{fontsize=\\scriptsize,fontshape=sl,formatcom={\\color{rinput}}}\n"
      "\\DefineVerbatimEnvironment{Soutput}{Verbatim}{\\vspace{-2em},fontsize=\\scriptsize,formatcom={\\color{routput}}}\n" 
      "\\DefineVerbatimEnvironment{Scode}{Verbatim}{fontshape=sl,formatcom={\\color{headings}}}\n" 
      "\\fvset{listparameters={\\setlength{\\topsep}{1em}}}\n"
      "%\\renewenvironment{Houtput}{%\n"
      "% \\begin{scriptsize}\n"
      "%    \\color{routput}\n"
      "%    \\par\n"
      "%    \\tikzexternaldisable\n"
      "%    \\begin{tikzpicture}\n"
      "%      \\node[fill=rbackground,rectangle,minimum width=0.9\\textwidth] (m)\n"
      "%      \\bgroup\\begin{minipage}{0.85\\textwidth}%\n"
      "%}\n"
      "%{%\n"
      "%  \\end{minipage}\\egroup;\n"
      "%  \\draw[dashed] (m.south west) rectangle (m.north east);\n"
      "%  \\end{tikzpicture}\n"
      "%  \\end{scriptsize}\n"
      "%\\\\ \n" 
      "%}\n"

      "\\definecolor{highlightBg}{rgb}{1,1,0.8}\n"
      "\\definecolor{highlightBorder}{rgb}{0,0,0}\n"
      "\\definecolor{white}{rgb}{1,1,1}\n"
      "\\definecolor{orangeColor}{HTML}{FF9900}\n"

      "%\\renewenvironment{Hchunk}{% \n"
      "% \\color{routput}\n"
      "% \\par\n"
      "% \\begin{tikzpicture}\n"
      "%  \\node[fill=rbackground,rectangle,minimum width=0.9\\textwidth] (m)\n"
      "%  \\bgroup\\begin{minipage}{0.85\\textwidth}%\n"
      "%}{%\n"
      "%  \\end{minipage}\\egroup;\n"
      "%  \\draw[dashed] (m.south west) rectangle (m.north east);\n"
      "%  \\end{tikzpicture}\\\\ \n" 
      "%}\n"

      "%\\newenvironment{elaboration}{%\n"
      "%  \\par\n"
      "%  \\begin{tikzpicture}\n"
      "%  \\node[fill=rbackground,rectangle,minimum width=0.9\textwidth] (m)\n"
      "%  \\bgroup\\begin{minipage}{0.85\\textwidth}%\n"
      "% }{%\n"
      "%  \\end{minipage}\\egroup;\n"
      "%  \\draw[dashed] (m.south west) rectangle (m.north east);\n"
      "%  \\end{tikzpicture}\\\\ \n"
      "% }\n"

      "%\\makeatletter\n"
      "%\\renewenvironment{Schunk}{\\begin{elaboration}}{\\end{elaboration}}\n"
      "%\\makeatother\n"

      "%\\renewenvironment{Schunk}{\\vspace{\\topsep}}{\\vspace{\\topsep}}\n"
      "%-------------------------------------------------\n"
      "%--Change the format of the captions--------------\n"
      "% Different font in captions\n"
      "\\newcommand{\\captionfonts}{\\small\\sf}\n"
      "\\makeatletter  % Allow the use of @ in command names\n"
      "\\long\\def\\@makecaption#1#2{%\n"
      "\\vskip\\abovecaptionskip\n"
      "\\sbox\\@tempboxa{{\\captionfonts #1: \\em#2}}%\n"
      "\\ifdim \\wd\\@tempboxa >\\hsize\n"
      "{\\captionfonts #1: \\em#2\\par}\n"
      "\\else\n"
      "\\hbox to\\hsize{\\hfil\\box\\@tempboxa\\hfil}%\n"
      "\\fi\n"
      "\\vskip\\belowcaptionskip}\n"
      "\\makeatother   % Cancel the effect of \\makeatletter\n"
      "%-------------------------------------------------\n"
      "%--Change the page formatting---------------------\n"
      "% Change the format of the page numbers\n"
      "\\usepackage{fancyhdr}\n"
      "\\pagestyle{fancy}\n"
      "\\fancyhf{} % clear all header and footer fields\n"
      "\\fancyhead[RE,LO]{\\hfill\\bfseries\\sf \\color{white}\\thepage}\n"
      "%\\fancyfoot[RE,LO]{\\hfill\\bfseries\\sf \\thepage}\n"
      "\\renewcommand{\\headrulewidth}{0pt}\n"
      "%-------------------------------------------------\n"
      "%--Change the name used for the table of contents-\n"
      "\\renewcommand{\\contentsname}{Table of contents}\n"
      "%-------------------------------------------------\n"

      "\\setlength\\parindent{0pt}\n"
      "\\setmonofont[Scale=MatchLowercase, ExternalLocation=\\string~/Dropbox/Config/Fonts/]{DejaVuSansMono.ttf}\n"
      "\\renewcommand{\\hlcomment}[1]{\\textcolor[HTML]{3C802C}{#1}}%\n"
      "\\renewcommand{\\hlstring}[1]{\\textcolor[HTML]{ED7722}{#1}}%\n"
      "\\renewcommand{\\hlfunctioncall}[1]{\\textcolor[HTML]{053369}{#1}}%\n"
      "\\renewcommand{\\hlnumber}[1]{\\textcolor[HTML]{0F20F6}{#1}}%\n"
      "\\renewcommand{\\hlkeyword}[1]{\\textcolor[HTML]{AA1F63}{\\textbf{#1}}}%\n"
      "\\renewcommand{\\hlargument}[1]{\\textcolor[HTML]{053369}{#1}}%\n"

      "\\setbox\\hlnormalsizeboxopenbrace=\\hbox{\\begin{scriptsize}\\verb.{.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxclosebrace=\\hbox{\\begin{scriptsize}\\verb.}.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxlessthan=\\hbox{\\begin{scriptsize}\\verb.<.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxdollar=\\hbox{\\begin{scriptsize}\\verb.$.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxunderscore=\\hbox{\\begin{scriptsize}\\verb._.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxand=\\hbox{\\begin{scriptsize}\\verb.&.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxhash=\\hbox{\\begin{scriptsize}\\verb.#.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxat=\\hbox{\\begin{scriptsize}\\verb.@.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxbackslash=\\hbox{\\begin{scriptsize}\\verb.\\.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxgreaterthan=\\hbox{\\begin{scriptsize}\\verb.>.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxpercent=\\hbox{\\begin{scriptsize}\\verb.%.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxhat=\\hbox{\\begin{scriptsize}\\verb.^.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxsinglequote=\\hbox{\\begin{scriptsize}\\verb.'.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxbacktick=\\hbox{\\begin{scriptsize}\\verb.`.\\end{scriptsize}}%\n"
      "\\setbox\\hlnormalsizeboxhat=\\hbox{\\begin{scriptsize}\\verb.^.\\end{scriptsize}}%\n"

      "\\usepackage{multirow}\n"
      "\\usepackage{wasysym}\n"

      "\\renewenvironment{kframe}{%\n"
      " \\begin{scriptsize}\n"
      "   \\color{routput}\n"
      "   \\par\n"
      "   \\tikzexternaldisable\n"
      "     \\begin{tikzpicture}\n"
      "       \\node[fill=rbackground,rectangle,minimum width=\\textwidth] (m)\n"
      "       \\bgroup\\begin{minipage}{0.95\\textwidth}%\n"
      " }\n"
      " {%\n"
      "   \\end{minipage}\\egroup;\n"
      "   \\draw[dashed] (m.south west) rectangle (m.north east);\n"
      "   \\end{tikzpicture}\n"
      "   \\end{scriptsize}\n"
      " \\\n"
      " }\n"

    "\\fi\n"

      "\\begin{document}\n"
      "\\iffinished\n"
      "\\sf\n"
      "\\AddToShipoutPicture{\\BackgroundPic}\n"
      "%\\AddToShipoutPicture{\\SidePic}\n"
      "\\AddToShipoutPicture{\\DraftWord}\n"
      "%<<Setcache - THIS CODE SHOULD BE IGNORED, echo=F>>=\n"
      "%# The following step requires the cacheSweave package\n"
      "%setCacheDir(\"cache\")\n"
      "%reSQL<-TRUE\n"
      "%@\n\n" 

      "\\lstset{basicstyle=\\small\\ttfamily,columns=fixed,numbers=left,numberstyle=\\tiny,xleftmargin=3ex,xrightmargin=3ex,frame=lines,float=htb!}\n"
      "\\fi\n"
      "\n" _ "\n\n"
      "<<Rwidth, echo=FALSE, results=\"hide\">>=\n"
      "options(width=110)\n"
      "@\n\n"
      "\\iffinished\n"
      "\\noindent\\begin{minipage}[t]{\\linewidth}{%centering\n"
      "{\\noindent\\sffamily\\bfseries\\Huge " str "\n"
      "}\\\\[1em]\n"
      "\\large{Murray Logan}\\\\ \n"
      "\\normalsize\\textit{\\today}\n"
      "\\end{minipage}\\\\ \n" 

      "\\rule{\\linewidth}{2pt}\\\\[2pt]\n"
  
      "\\titleformat{\\section}{\\Large\\sf\\bfseries\\raggedright\\color{headings}}{}{0em}{}[\\titlerule]\n"
      "\\noindent\n"
      "{\\tikzexternaldisable\n"
      "\\begin{tikzpicture}\n"
      "\\node [fill=shade,rounded corners=5pt]\n"
      "{\n"
      "\\begin{minipage}[t]{\\textwidth}\n"  
      "\\tableofcontents\n"
      "\\end{minipage}\n"
      "};\n"
      "\\end{tikzpicture}\n"
      "}\n"
      "\\titleformat{\\section}{\\Large\\sf\\bfseries\\raggedright\\color{headings}\\thesection. }{}{0em}{}[\\titlerule]\n"
      "\\fi\n"

      "\\section{Data importation and preparation}\n"
      "\\subsection{Read in data}\n"
      "<<ReadData, tidy=TRUE>>=\n"
      "#this is a comment\n"
      "a<-100\n"
      "a\n"
      "#data <- read.table('data.csv', header=T, sep=',', strip.white=T)\n"
      "@\n"
      "\\subsection{Prepare data}\n"

      "\\iffinished\n"
      "\\noindent\n"
      "{\\tikzexternaldisable\n"
      "\\begin{tikzpicture}\n"
      "\\node [fill=shade,rounded corners=5pt]\n"
      "{\n"
      "\\begin{minipage}[t]{\\textwidth}\n"  
      "\\textbf{Conclusions}.\n"
      "\\end{minipage}\n"
      "};\n"
      "\\end{tikzpicture}}\n"

      "\\addcontentsline{toc}{section}{References and additional reading}\\titleformat{\\section}{\\Large\\sf\\bfseries\\raggedright\\color{headings}}{}{0em}{}[\\titlerule]\n"
      "\\bibliographystyle{\\string~/Dropbox/Work/Resources/References/ecology}\n"
      "\\bibliography{\\string~/Dropbox/Work/References/References}\n" 
      "~\\\\[2em]\n"
      "<<sanitize, echo=F>>=\n"
      "sanitize <- function(x) gsub(\"_\",\"\\\\\\\\_\", x, fixed=TRUE)\n"
      "@\n"
      "\\addcontentsline{toc}{section}{Appendices}\n"
      "\\appendix{\\Large\\sf\\bfseries\\raggedright\\color{headings} Appendicies \\\\[0.3em]\\titlerule\\\\[0.1em]}\n"
      "\\titleformat{\\subsection}{\\large\\sf\\bfseries\\itshape\\raggedright\\color{headings}\\Alph{subsection}. }{}{0em}{}\n"
      "\\renewcommand{\\thesubsection}    {\\Alph{subsection}}\n"
      "\\subsection{Production notes}\n"
      "\\noindent This document was produced using \\LaTeX~ and \\Sexpr{print(version$version.string)} via knitr, on a system:$\\Sexpr{sanitize(version$platform)}$.\n"
      "The complete annotated R syntax is in the accompanying " name ".R file.\n"

      "%<<CreateRFile - THIS CODE SHOULD BE IGNORED, echo=FALSE>>=\n"
      "%Stangle('"name ".rnw')\n"
      "%@\n" 
      "\\fi\n"
      "\\end{document}\n")
    ;;------------END OF R-xelatex-----------------------------------------------------------------------------------------------------------------------------------

    (define-skeleton xelatex-rnw-xtable
      "Inserts a basic R table into xelatex."
      "Table location: "
      (interactive)
      "<<hooks, echo=FALSE>>=\n"
      "old_hook <- knit_hooks$get()$chunk\n"
      "knit_hooks$set(chunk=function(x, options){x})\n"
      "@\n\n" 
      "\\begin{table}[" str "]\n"
      "\\sf\n"
      "\\caption{" (setq v1 (skeleton-read "Caption? ")) "}\\label{tab:"  (setq v2 (skeleton-read "label? ")) "}\n"
      "\\begin{tabularx}{\\linewidth}{xll}\n"
      "\\hline\n"
      "\\textbf{A}&\\textbf{B}&\\textbf{C}\\\\\n"
      "\\hline\n"
      "<<Name, echo=F, results=tex>>=\n"
      "print(xtable(" (setq v3 (skeleton-read "tab? ")) ",digits=c(0,4,0)),NA.string='NA',hline.after=NULL,include.rownames=F,floating=FALSE,only.contents=T,include.colnames=F,sanitize.text.function=function(x) x, sanitize.rownames.function=function(x) x)\n"
      "@\n"
      "\\hline\n"
      "\\end{tabularx}\n"
      "\\end{table}\n"
      "<<restore_hooks, echo=FALSE>>=\n"
      "knit_hooks$set(chunk=old_hook)\n"
      "@\n"
    )

    (define-skeleton xelatex-color-table
      "Inserts a color table into xelatex."
      "Table location: "
      (interactive)
      "\\arrayrulecolor{orangeColor}\n"
      "\\rowcolors[\\hline]{3}{orangeColor!15}{white}\n"
      "\\begin{table}[hptb]\n"
      "  \\begin{minipage}[h]{1.0\\linewidth}\n"
      "    \\begin{tabularx}{\\linewidth}{|Xlclllccc|}\n"
      "      \\hline\n"
      "      \\rowcolor{orangeColor}&&&&&&\\textcolor{white}{\\textbf{Enrol.}}&\\textcolor{white}{\\textbf{Enrol. per}}&\n"
      "      \\textcolor{white}{\\textbf{Enrol. per}}\\\\\n"
      "      \\rowcolor{orangeColor}\\textcolor{white}{\\textbf{Faculty}}&\n"
      "      \\textcolor{white}{\\textbf{Unit}}&\n"
      "      \\textcolor{white}{\\textbf{Sem.}}&\n"
      "      \\textcolor{white}{\\textbf{Campus}\\footnote{B=Berwick, CA=Caulfield, CL=Clayton, G=Gippsland, M=Malaysia, P=Peninsula, S=South Africa}}&\n"
      "      \\textcolor{white}{\\textbf{LMS 2011}}&\n"
      "      \\textcolor{white}{\\textbf{LMS 2012}}&\n"
      "      \\textcolor{white}{\\textbf{range\\footnote{Range of enrollment sizes across the campuses and years}}}&\n"
      "      \\textcolor{white}{\\textbf{campus\\footnote{Mean enrollment size per campus/year}}}&\n"
      "      \\textcolor{white}{\\textbf{year\\footnote{The mean of the total enrollment across all campuses per year}}}\\\\\n"
      "      \\hline\n"
      "      Arts&ATS1325&1&B,CA,CL,M,S&Blackboard&Blackboard&18-283&137.6&619.0\\\\\n"
      "      Arts&ATS1328&1&CA,M,S&Blackboard&Blackboard&34-165&80.7&242.0\\\\\n"
      "      Arts&ATS1365&1&CA,CL,S&Blackboard&Blackboard&94-200&125.0&376.5\\\\\n"
      "      Arts&ATS1371&1&CA,CL,S&Blackboard&Moodle&39-192&94.5&283.5\\\\\n"
      "      Buseco&AFW1002&2&B,G,M,P,S&Blackboard&Blackboard&2-210&78.2&391.0\\\\\n"
      "      Buseco&ECW1102&2&B,G,M,P,S&Blackboard&Blackboard&8-208&101.1&455.0\\\\\n"
      "      Buseco&ETC1000&1&CL,M&Blackboard&Blackboard&9-484&244.3&488.5\\\\      \n"
      "      Buseco&MGW1010&1&B,G,M,P,S&Blackboard&Blackboard&29-400&177.7&799.5\\\\  \n"
      "      Edu&EDF1303&1&B,CL,G,P&Blackboard&Blackboard&33-99&73.6&257.5\\\\\n"
      "      Edu&EDF1305&1&G,P&Blackboard&Blackboard&35-47&42.0&84.0\\\\\n"
      "      \\hline\n"
      "    \\end{tabularx}\n"
      "  \\end{minipage}\n"
      "  \\caption{Basic enrollment characteristics of the units selected as data for the learning analytics prototype.}\n"
      "  \\label{tab:unitSelections}\n"
    "\\end{table}\n"
    "}\n"
    )

    (define-skeleton xelatex-sideways-table
      "Inserts a color table into xelatex."
      "Table location: "
      (interactive)
      "<<hooks, echo=FALSE>>=\n"
      "old_hook <- knit_hooks$get()$chunk\n"
      "knit_hooks$set(chunk=function(x, options){x})\n"
      "@\n"  
      "\\begin{sidewaystable}[htbp]\n"
      "\\sf\n"
      "\\caption{Estimated mean (95\\% HPS interval) DAS (Depression, Anxiety and Stress) scores associated with survery 1 and 2 (semester 1 and 2 respectively) along with the pairwise mean difference (Effect) and percentage effect (Effect expressed as a percentage of survey 1 score).  The probability that the percent effect is greater than 0, 5\\% and 10\\% are also included. Median and percentage finite-population variance components (in standard deviation units) are provided for the levels of Student, Survey and Residuals.}\\label{tab:aa}\n"
      "\\begin{tabularx}{\\linewidth}{X@{\\extracolsep{0.5em}}\n"
      "    c@{\\extracolsep{1em}}l@{\\extracolsep{0.5em}}l@{\\extracolsep{0.5em}}l@{\\extracolsep{1em}}\n"
      "    c@{\\extracolsep{1em}}l@{\\extracolsep{0.5em}}l@{\\extracolsep{0.5em}}l@{\\extracolsep{1em}}\n"
      "    c@{\\extracolsep{1em}}l@{\\extracolsep{0.5em}}l@{\\extracolsep{0.5em}}l@{\\extracolsep{0.5em}}}\n"
      "\\toprule\n"
      "&\\multicolumn{4}{c}{\\textbf{Depression}}&\\multicolumn{4}{c}{\\textbf{Anxiety}}&\\multicolumn{4}{c}{\\textbf{Stress}}\\\\\n"
      "\\cmidrule(c){2-5}\\cmidrule(c){6-9}\\cmidrule(c){10-13}\n"
      "&\\textbf{Mean}&\\multicolumn{3}{c}{\\textbf{Prob. increase}}&\\textbf{Mean}&\\multicolumn{3}{c}{\\textbf{Prob. increase}}&\\textbf{Mean}&\\multicolumn{3}{c}{\\textbf{Prob. increase}}\\\\\n"
      "\\cmidrule(c){3-5}\\cmidrule(c){7-9}\\cmidrule(c){11-13}\n"
      "\\textbf{Source}&\\textbf{(95\\% HPD)}&\\textbf{>0\\%}&\\textbf{>5\\%}&\\textbf{>10\\%}&\\textbf{(95\\% HPD)}&\\textbf{>0\\%}&\\textbf{>5\\%}&\\textbf{>10\\%}&\\textbf{(95\\% HPD)}&\\textbf{>0\\%}&\\textbf{>5\\%}&\\textbf{>10\\%}\\\\\n"
      "\\midrule \n"
      "<<JAGStable, echo=FALSE, results='asis'>>=\n"
      "library(xtable)\n"
      "#prepare\n"
      "sum.D$HPD <- sprintf(\"%6.2f (%6.2f - %6.2f)\",sum.D$mean,sum.D$lower.1, sum.D$upper.1)\n"
      "sum.A$HPD <- sprintf(\"%6.2f (%6.2f - %6.2f)\",sum.A$mean,sum.A$lower.1, sum.A$upper.1)\n"
      "sum.S$HPD <- sprintf(\"%6.2f (%6.2f - %6.2f)\",sum.S$mean,sum.S$lower.1, sum.S$upper.1)\n"
      "sums <- cbind(sum.D[,c(4,8,5:7)],sum.A[,c(8,5:7)],sum.S[,c(8,5:7)])\n"
      "print(xtable(sums,digits=c(0,0,0,rep(2,3),0,rep(2,3),0,rep(2,3))),NA.string='',hline.after=NULL,include.rownames=F,floating=FALSE,only.contents=T,include.colnames=F,sanitize.text.function=function(x) x, sanitize.rownames.function=function(x) x)\n"
      "@\n"
      "\\midrule\n"
      "&\\multicolumn{2}{c}{\\textbf{Var. comp.}}&&&\\multicolumn{2}{c}{\\textbf{Var. comp.}}&&&\\multicolumn{2}{c}{\\textbf{Var. comp.}}&&\\\\\n"
      "\\cmidrule(c){2-3}\\cmidrule(c){6-7}\\cmidrule(c){10-11}\n"
      "&\\textbf{Median}&\\textbf{\\%}&&&\\textbf{Median}&\\textbf{\\%}&&&\\textbf{Median}&\\textbf{\\%}&&\\\\\n"
      "%\\multicolumn{3}{l}{\\textsl{Variance components (sd)}}\\\\\n"
      "<<JAGStable2, echo=FALSE, results='asis'>>=\n"
      "library(xtable)\n"
      "#prepare\n"
      "sd.D$HPD <- sprintf(\"%6.2f (%6.2f - %6.2f)\",sd.D$median,sd.D$lower.1, sd.D$upper.1)\n"
      "sd.A$HPD <- sprintf(\"%6.2f (%6.2f - %6.2f)\",sd.A$median,sd.A$lower.1, sd.A$upper.1)\n"
      "sd.S$HPD <- sprintf(\"%6.2f (%6.2f - %6.2f)\",sd.S$median,sd.S$lower.1, sd.S$upper.1)\n"
      "sds <- cbind(sd.D[,c(5,6,4)],matrix(rep(NA,6),ncol=2),sd.A[,c(6,4)],matrix(rep(NA,6),ncol=2),sd.S[,c(6,4)],matrix(rep(NA,6),ncol=2))\n"
      "print(xtable(sds,digits=c(0,0,0,rep(2,3),0,rep(2,3),0,rep(2,3))),NA.string='',hline.after=NULL,include.rownames=F,floating=FALSE,only.contents=T,include.colnames=F,sanitize.text.function=function(x) x, sanitize.rownames.function=function(x) x)\n"
      "@\n"
      "\\bottomrule\n"
      "\\end{tabularx}\n"
      "\\end{sidewaystable}\n"
      "<<restore_hooks, echo=FALSE>>=\n"
      "knit_hooks$set(chunk=old_hook)\n"
      "@\n" 
    )


    ;; load-nas-music
    ;; -------------------
    ;; Create a playlist from the MBW network drive 
    ;; Bind it to C-c C-n
    (defun load-nas-music ()
      "Create a playlist from the MBW network drive."
      (interactive)
        (emms-add-directory-tree "/mnt/MBWpublic/Shared Music/Music")
      )
     (define-key global-map [(control c) (control n)] 'load-nas-music) ; Bind to C-c C-n

    (defun load-local-music ()
      "Create a playlist from the local drive."
      (interactive)
        (emms-add-directory-tree "~/music")
      )
     (define-key global-map [(control c) (control m)] 'load-local-music) ; Bind to C-c C-m








    ;; Show important emacs keys
    (defun show-emacs-keys()
      "Display a series of useful emacs key bindings"
      (interactive)
      (let ((mkeys (concat
                                    "===================================================================\n"
                                    "                   Common Emacs Key bindings                       \n"
                                    "===================================================================\n"
                                    " C-c SPC     Jump to a word     |  M-p             Jump to a window\n"
                                    )))
            (if (fboundp 'with-displaying-help-buffer)
                    (with-displaying-help-buffer
                     (lambda ()
                       (princ mkeys)) "Emacs keys")
              (with-output-to-temp-buffer "Emacs keys"
                    (princ mkeys)))))


    (defun show-mkeys()
             "Display a series of useful emacs key bindings."
             (interactive)
             (find-file-other-frame "~/Dropbox/org/notes.org")
             (search-forward "Quick commands" nil nil 1) (setq p1 (point))
             (search-forward "** BUFFER" nil nil 1) (setq p2 (point)) 
             (narrow-to-region p1 p2)
             (show-all)
    )

    ;;(pos-tip-show STRING &optional TIP-COLOR POS WINDOW TIMEOUT WIDTH FRAME-COORDINATES DX DY)
    ;;Note, the popup menu gets its color, font etc from gtk
    ;;In order for this to look OK, you need to set the Font to a monospace font
    ;; Settings -> User Interface Settings
    ;; (defun ml-show-mkeys()
    ;;       "Display a series of useful emacs key bindings."
    ;;       (interactive)
    ;;       (pos-tip-show
    ;;        (with-temp-buffer
    ;;              (insert-file-contents "~/Dropbox/org/notes.org")
    ;;              (search-forward "Quick commands" nil nil 1) (setq p1 (point))
    ;;              (search-forward "** BUFFER" nil nil 1) (setq p2 (point))
    ;;              (narrow-to-region p1 p2)
    ;;              (buffer-string)
    ;;              )
    ;;        nil nil nil 0)
    ;;       )
    (defun ml-show-mkeys(x)
             "Display a series of useful emacs key bindings."
             (interactive "sChoice (q=quick, p=popup): ")
             (pos-tip-show
              (with-temp-buffer
                    (insert-file-contents "~/Dropbox/org/notes.org")
                    (if (equal x "q") (progn (search-forward "Quick commands" nil nil 1) (setq p1 (point))))
                    (if (equal x "p") (progn (search-forward "POPUP shortcuts" nil nil 1) (setq p1 (point))))
                    (search-forward "*" nil nil 1) (setq p2 (point))
                    (narrow-to-region p1 p2)
                    (buffer-string)
                    )
              nil nil nil 0)
             )
    (global-set-key (kbd "C-'") 'ml-show-mkeys)


    ;; (defun ml-load-files (x)
    ;;   "Load notes.org"
    ;;   (interactive "sChoice (n=notes, a=AIMS):")
    ;;   (if (equal x "n") (find-file "~/Dropbox/org/notes.org"))
    ;;   (if (equal x "a") (find-file "~/Dropbox/org/AIMS.org"))

    ;; )
    ;; (global-set-key (kbd "C-c f") 'ml-load-files)

    (defun ml-load-files-notes ()
      "Load notes.org"
      (interactive)
      (find-file "~/Dropbox/org/notes.org")
      )
    (global-set-key (kbd "C-c f n") 'ml-load-files-notes)
    (defun ml-load-files-AIMS ()
      "Load AIMS.org"
      (interactive)
      (find-file "~/Dropbox/org/AIMS.org")
      )
    (global-set-key (kbd "C-c f a") 'ml-load-files-AIMS)
    (defun ml-load-files-references ()
      "Load references.org"
      (interactive)
      (find-file "~/Dropbox/org/references.org")
      )
    (global-set-key (kbd "C-c f r") 'ml-load-files-references)
    (defun ml-load-files-bib ()
      "Load References.bib"
      (interactive)
      (find-file "~/Dropbox/Work/Resources/References/References.bib")
      )
    (global-set-key (kbd "C-c f b") 'ml-load-files-bib)
    (defun ml-load-files-init ()
      "Load init.el"
      (interactive)
      (find-file "~/.emacs.d/init.el")
      )
    (global-set-key (kbd "C-c f i") 'ml-load-files-init)




    ;; ===========================================================================
    ;; The Menu
    ;; ===========================================================================

    ;; This adds a small menu for my little macros up above and other
    ;; additions.  This makes it relatively easy to access them in
    ;; Emacs (although the hotkeys are certainly more efficient.)
    ;;
    (let ((menu '("Murray"
               ("Files" 
                            ["notes.org" ml-load-files-notes]
                            ["AIMS.org" ml-load-files-AIMS]
                            ["references.org" ml-load-files-references]
                            ["References.bib" ml-load-files-bib]
                            ["init.el" ml-load-files-init]
                       )
               ("Mounting"
                            ["mount MBWpublic" (shell-command (concat "echo " (shell-quote-argument (read-passwd "Password? "))" | sudo mount -t cifs //192.168.1.2/Public /mnt/MBWpublic -o user=murray,password=merycism,uid=1000"))]
                            ["umount MBWpublic" (shell-command (concat "echo " (shell-quote-argument (read-passwd "Password? "))" | sudo -S umount /mnt/MBWpublic"))]
                ["mount MBWmurray" (shell-command (concat "echo " (shell-quote-argument (read-passwd "Password? "))" | sudo -S mount -t cifs //192.168.1.2/Murray /mnt/MBWmurray -o user=murray,password=merycism,uid=1000"))]
                            ["umount MBWmurray" (shell-command (concat "echo " (shell-quote-argument (read-passwd "Password? "))" | sudo -S umount /mnt/MBWmurray"))]
                            ["AIMS vpn" (shell-command (concat "echo " (shell-quote-argument (read-passwd "Password? "))" | sudo -S vpnc AIMS.conf"))]
                            )
               ("Text file editing"
                   ["Strip Trailing" strip-trailing-space]
                   ["Goto Longest Line" goto-longest-line]
                   )
                  ["ASCII Chart" show-ascii-chart]
              ;;["Emacs Keys" show-emacs-keys]
                      ;;["Emacs KeysA" show-mkeys]
                      ["Show keys" ml-show-mkeys]
                      ;;["Emacs Keyss" (find-file-other-frame "~/Dropbox/org/notes.org")]
                      ;;["Emacs Keyss" (shell-command "cat ~/Dropbox/org/notes.org | sed -rn '/Quick commands/,/BUFFERS/{/(Quick commands|BUFFERS)/d;p;}'")]
                      ;;["Emacs KeyssB" (pos-tip-show (with-temp-buffer (shell-command "cat ~/Dropbox/org/notes.org | sed -rn '/Quick commands/,/BUFFERS/{/(Quick commands|BUFFERS)/d;p;}'") (buffer-string)))]
                  ["Goto Matching Paren" goto-matching-paren]
                  ["Speedbar" speedbar]
                  ("HTMLize"
                   ["Buffer" htmlize-buffer]
                   ["File" htmlize-file])
                  ("R, LaTeX and HTML"
                       ["small-markdown-knitr-pandoc" small-markdown-knitr-pandoc]
                       ["large-markdown-knitr-pandoc" large-markdown-knitr-pandoc]
                       ["elsarticle-R" elsarticle-R]
                       ["knitr-xelatex" knitr-xelatex]
                   ["R-xelatex" R-xelatex]
                       ("Tables"
                            ["xtable" xelatex-rnw-xtable]
                            ["color-table" xelatex-color-table]
                            ["color-table" xelatex-sideways-table]
                            )
                       )
                      ("Music"
                       ["Load NAS music" load-nas-music]
                       ["Load local music" load-local-music]
                       ;;["Volume down" emms-volume-lower]
                       ;;["Volume up" emms-volume-raise]
                       ["Pause" emms-pause]
                       )
    )))

      (if (fboundp 'add-submenu)
          (add-submenu nil menu)
        (require 'easymenu)
        (easy-menu-define -menu global-map "Murray's Personal Menu" menu)
        (easy-menu-add murrays-menu global-map)))

  #+END_SRC


* File associations
  #+BEGIN_SRC emacs-lisp
    ;;============================================================
    ;; File associations
    ;;============================================================
    (setq auto-mode-alist
          (append '(("\\.C$"     . c++-mode)
                    ("\\.cc$"    . c++-mode)
                    ("\\.cpp$"   . c++-mode)
                    ("\\.cxx$"   . c++-mode)
                    ("\\.hxx$"   . c++-mode)
                    ("\\.h$"     . c++-mode)
                    ("\\.hh$"    . c++-mode)
                    ("\\.idl$"   . c++-mode)
                    ("\\.c$"     . c-mode)
                    ("\\.cg$"    . c-mode)    ; nvidia cg
                    ("\\.pl$"    . perl-mode)
                    ("\\.pm$"    . perl-mode)
                    ("\\.java$"  . java-mode)
                    ("\\.m$"     . octave-mode)
                    ("\\.org$"    . org-mode)
                    ("\\.html$"  . html-mode)
                    ("\\.Rhtml$"  . html-mode)
                    ("\\.htm$"   . html-mode)
                    ("\\.xml$"   . sgml-mode)
                    ("\\.R$"     . r-mode)
                    ("\\.r$"     . r-mode)
                    ("\\.log$"   . text-mode)
                    ("\\.sty$"   . latex-mode)
                    ("\\.tex$"   . latex-mode)
                    ("\\.latex$" . latex-mode)
                    ("\\.diff$"  . diff-mode)
                    ("\\.rnw$"   . noweb-mode)
                    ("\\.Rmd$"   . markdown-mode)
                    ("\\.sc$"  . c++-mode)
                    ;;("\\.emacs"  . emacs-list-mode)
                    ("\\.patch$" . diff-mode))
                  auto-mode-alist))
    ;;============================================================
        

    ;; (add-hook 'markdown-mode-hook 'my-mmm-mode)

    ;; (mmm-add-classes
    ;;  '((literate-haskell-bird
    ;;     :submode markdown-mode
    ;;     :front "^[^>]"
    ;;     :include-front true
    ;;     :back "^>\\|$"
    ;;     )
    ;;    (literate-haskell-R
    ;;     :submode r-mode
    ;;     :front "```{r"
    ;;     :front-offset (end-of-line 1)
    ;;     :back "```"
    ;;     :include-back nil
    ;;     :back-offset (beginning-of-line -1)
    ;;     )))

    ;; (defun my-mmm-mode ()
    ;;   ;; go into mmm minor mode when class is given
    ;;   (make-local-variable 'mmm-global-mode)
    ;;   (setq mmm-global-mode 'true))

    ;; (setq mmm-submode-decoration-level 0)
  #+END_SRC


* Org mode

** Part 1
   #+BEGIN_SRC emacs-lisp
     (use-package org
       :ensure t)

     (require 'org-install)

     ;; the following defines which languages work with org-mode for tangling etc
     (defun R-org-confirm-babel-evaluate (lang body)
       (not (string= lang "R")))
     (setq org-confirm-babel-evaluate 'R-org-confirm-babel-evaluate)

     ;;(require 'ob-ipython)
     (setq exec-path (append exec-path '("/opt/local/bin")))

     (defun ck/org-confirm-babel-evaluate (lang body)
       (not (or (string= lang "ipython") (string= lang "R"))))
     (setq org-confirm-babel-evaluate 'ck/org-confirm-babel-evaluate)

     (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . nil)
		(ditaa . t)
		(R . t)
		(sh . t)
		(latex . t)
		(C . t)
		(python . t)
		;;(ipython . t)
		))


     (custom-set-variables
      '(org-export-html-extension "html")
      '(org-export-html-postamble-format (quote (("en" ""))))
      '(org-export-html-preamble "")
      '(org-export-htmlize-output-type (quote css))
      )


     ;;Map C-c a to org-agenda
     (global-set-key (kbd "C-c a") 'org-agenda)
     ;;(global-set-key (kbd "<f12>") 'org-agenda)
     (global-set-key (kbd "<f11>") 'org-clock-goto)
     (global-set-key (kbd "C-<f11>") 'org-clock-in)
     (global-set-key (kbd "<f9> w") 'ml/widen)
     (global-set-key (kbd "<f9> n") 'ml/org-todo)
     (global-set-key (kbd "<f9> I") 'bh/punch-in)
     (global-set-key (kbd "<f9> O") 'bh/punch-out)

     ;;(global-set-key (kbd "<f9> SPC") 'bh/clock-in-last-task)

     (define-key global-map (kbd "C-c c") 'org-capture)
     ;; (setq org-capture-templates
     ;;       '(("t" "todo" entry (file+headline "~/Dropbox/org/todo.org" "Tasks")
     ;;          "* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n")))
     ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
     ;; http://orgmode.org/manual/Capture-templates.html
     ;; %? prompt for input
     ;; \n newline
     ;; \t tab
     ;; %U inactive timestamp
     ;; %a link to item captured from

     ;; Some convienience functions that are mapped to user defined keys functions
     (defun ml/widen () ;; <f9> w
       (interactive)
       (if (equal major-mode 'org-agenda-mode)
           (progn
             (org-agenda-remove-restriction-lock)
             (when org-agenda-sticky
               (org-agenda-redo)))
         (widen)))
     (defvar bh/hide-scheduled-and-waiting-next-tasks t)

     (add-hook 'org-agenda-mode-hook
               '(lambda () (org-defkey org-agenda-mode-map "W" (lambda () (interactive) (setq ml/hide-scheduled-and-waiting-next-tasks t) (ml/widen))))
               'append)

     (defun ml/narrow-to-org-subtree ()
       (widen)
       (org-narrow-to-subtree)
       (save-restriction
         (org-agenda-set-restriction-lock)))

     (defun ml/org-todo (arg) ;; F9 n
       (interactive "p")
       (if (equal arg 4)
           (save-restriction
             (ml/narrow-to-org-subtree)
             (org-show-todo-tree nil))
         (ml/narrow-to-org-subtree)
         (org-show-todo-tree nil)))

     ;;============================================================
     ;; Diary mode - fancy display
     ;;============================================================
     ;;Here is some code to make your calendar and diary display fancier:
     (setq view-diary-entries-initially t
           mark-diary-entries-in-calendar t
           number-of-diary-entries 7)
     (add-hook 'diary-display-hook 'fancy-diary-display)
     (add-hook 'today-visible-calendar-hook 'calendar-mark-today)
     (setq diary-file "~/Dropbox/org/diary")

     (setq org-agenda-include-diary t)
     (setq org-agenda-diary-file "~/git/org/diary.org")

     (setq org-agenda-insert-diary-extract-time t)


     ;; Define the list of org files that are in the agenda search path
     (setq org-agenda-files (list "~/Dropbox/org/work.org"
	                              "~/Dropbox/org/gcal.org"
                                  "~/Dropbox/org/gtd.org"
                                  "~/Dropbox/org/stats.org"
                                  "~/Dropbox/org/AIMS.org"
                                  "~/Dropbox/org/todo.org"
                                  "~/Dropbox/org/book.org"
                                  "~/Dropbox/org/sandpit.org"
                                  "~/Dropbox/org/webdev.org"
                                  "~/Dropbox/org/magneticIsland.org"
                                  "~/Dropbox/org/home.org"
                                  "~/Dropbox/org/refile.org"))

     (setq
      ;;org-indent-mode t                      ;; ensure indentation - messes with capture mode
      org-hide-leading-stars t               ;; remove leading stars
      org-startup-align-all-tables t         ;; align all tables
      org-startup-with-inline-images t       ;; display inline images
      ;;org-startup-with-latex-preview t       ;; preview LaTeX fragments - seems to break agenda
      org-hidden-keywords '(title author email date)  ;; hide these in header
      org-hide-block-startup t
      org-export-default-language "en"
      ;;org-columns-default-format "%25ITEM %TODO %10SCHEDULED %3PRIORITY %TAGS"
      org-columns-default-format "%25ITEM %TODO %TAGS %CLOCKSUM %DEADLINE %10SCHEDULED %3PRIORITY"
      )
     (setq org-export-html-style
           "<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" />")

     ;; Start the weekly agenda on Monday
     (setq org-agenda-start-on-weekday 1)

     ;; Enable display of the time grid so we can see the marker for the current time
     (setq org-agenda-time-grid (quote ((daily today remove-match)
										#("----------------" 0 16 (org-heading t))
										(0700 0900 1100 1300 1500 1700 1900))))

     ;; Display tags farther right
     (setq org-agenda-tags-column -80)

     ;; org capture
     (setq org-directory "~/Dropbox/org/")
     (setq org-default-notes-file (concat org-directory "refile.org"))

     (setq org-todo-keywords  ;; SHIFT arrow
           (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                   (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

     (setq org-capture-templates
           (quote (("a" "Appointment" entry (file+datetree "~/Dropbox/org/gcal.org" )
					"* %?\n\n\%^T\n\n:PROPERTIES:\n\n:END:\n\n")
				   ("t" "todo" entry (file org-default-notes-file "Tasks")
					"* TODO %?\t%^G\n\t%U\n\t%a\n" :clock-in t :clock-resume t)
                   ("r" "respond" entry (file org-default-notes-file)
					"* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
                   ("n" "note" entry (file org-default-notes-file)
					"* %? :NOTE:\n\t%U\n\t%a\n" :clock-in t :clock-resume t)
                   ("j" "Journal" entry (file+datetree "~/Dropbox/org/diary.org")
					"* %?\n\t%U\n" :clock-in t :clock-resume t)
                   ("w" "org-protocol" entry (file org-default-notes-file)
					"* TODO Review %c\n%U\n" :immediate-finish t)
                   ("m" "Meeting" entry (file org-default-notes-file)
					"* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
                   ("p" "Phone call" entry (file org-default-notes-file)
					"* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
                   ("h" "Habit" entry (file org-default-notes-file)
					"* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))


                                             ; Targets include this file and any file contributing to the agenda - up to 9 levels deep
     (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                      (org-agenda-files :maxlevel . 9))))

     ;; Remove empty LOGBOOK drawers on clock out - these occur when a capture note takes less than
     ;; minute to create
     (defun bh/remove-empty-drawer-on-clock-out ()
       (interactive)
       (save-excursion
         (beginning-of-line 0)
         (org-remove-empty-drawer-at "LOGBOOK" (point))))

     (add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)


                                             ; Use full outline paths for refile targets - we file directly with IDO
     (setq org-refile-use-outline-path t)

                                             ; Targets complete directly with IDO
     (setq org-outline-path-complete-in-steps nil)

                                             ; Allow refile to create parent tasks with confirmation
     (setq org-refile-allow-creating-parent-nodes (quote confirm))

                                             ; Use IDO for both buffer and file completion and ido-everywhere to t
     (setq org-completion-use-ido t)
     (setq ido-everywhere t)
     (setq ido-max-directory-size 100000)
     (ido-mode (quote both))
                                             ; Use the current window when visiting files and buffers with ido
     (setq ido-default-file-method 'selected-window)
     (setq ido-default-buffer-method 'selected-window)
                                             ; Use the current window for indirect buffer display
     (setq org-indirect-buffer-display 'current-window)



                                             ; Use IDO for both buffer and file completion and ido-everywhere to t
     (setq org-completion-use-ido t)
     (setq ido-everywhere t)
     (setq ido-max-directory-size 100000)
     (ido-mode (quote both))
                                             ; Use the current window when visiting files and buffers with ido
     (setq ido-default-file-method 'selected-window)
     (setq ido-default-buffer-method 'selected-window)
                                             ; Use the current window for indirect buffer display
     (setq org-indirect-buffer-display 'current-window)


     ;;;; Refile settings
                                             ; Exclude DONE state tasks from refile targets
     (defun bh/verify-refile-target ()
       "Exclude todo keywords with a done state from refile targets"
       (not (member (nth 2 (org-heading-components)) org-done-keywords)))

     (setq org-refile-target-verify-function 'bh/verify-refile-target)

     (setq org-agenda-dim-blocked-tasks nil)

     ;; Compact the block agenda view
                                             ;(setq org-agenda-compact-blocks t)

     ;; Custom agenda command definitions
     (setq org-agenda-custom-commands
           (quote (
                               ("n" "Agenda and all TODOs"
								((agenda "" nil)
                                     (alltodo "" nil))
								nil)
                               ("N" "Notes" tags "NOTE"
					((org-agenda-overriding-header "Notes")
                     (org-tags-match-list-sublevels t)))
                   ("h" "Habits" tags-todo "STYLE=\"habit\""
					((org-agenda-overriding-header "Habits")
                     (org-agenda-sorting-strategy
                      '(todo-state-down effort-up category-keep))))
                   (" " "Agenda"
					((agenda "" nil)
                     (tags "REFILE"
                           ((org-agenda-overriding-header "Tasks to Refile")
							(org-tags-match-list-sublevels nil)))
                     (tags-todo "-CANCELLED/!"
								((org-agenda-overriding-header "Stuck Projects")
                                 (org-agenda-skip-function 'bh/skip-non-stuck-projects)
                                 (org-agenda-sorting-strategy
                                  '(category-keep))))
                     (tags-todo "-HOLD-CANCELLED/!"
								((org-agenda-overriding-header "Projects")
                                 (org-agenda-skip-function 'bh/skip-non-projects)
                                 (org-tags-match-list-sublevels 'indented)
                                 (org-agenda-sorting-strategy
                                  '(category-keep))))
                     (tags-todo "-CANCELLED/!NEXT"
								((org-agenda-overriding-header (concat "Project Next Tasks"
                                                                       (if bh/hide-scheduled-and-waiting-next-tasks
                                                                           ""
                                                                         " (including WAITING and SCHEDULED tasks)")))
                                 (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                                 (org-tags-match-list-sublevels t)
                                 (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                 (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                                 (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                                 (org-agenda-sorting-strategy
                                  '(todo-state-down effort-up category-keep))))
                     (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
								((org-agenda-overriding-header (concat "Project Subtasks"
                                                                       (if bh/hide-scheduled-and-waiting-next-tasks
                                                                           ""
                                                                         " (including WAITING and SCHEDULED tasks)")))
                                 (org-agenda-skip-function 'bh/skip-non-project-tasks)
                                 (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                 (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                                 (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                                 (org-agenda-sorting-strategy
                                  '(category-keep))))
                     (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
								((org-agenda-overriding-header (concat "Standalone Tasks"
                                                                       (if bh/hide-scheduled-and-waiting-next-tasks
                                                                           ""
                                                                         " (including WAITING and SCHEDULED tasks)")))
                                 (org-agenda-skip-function 'bh/skip-project-tasks)
                                 (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                 (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                                 (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                                 (org-agenda-sorting-strategy
                                  '(category-keep))))
                     (tags-todo "-CANCELLED+WAITING|HOLD/!"
								((org-agenda-overriding-header (concat "Waiting and Postponed Tasks"
                                                                       (if bh/hide-scheduled-and-waiting-next-tasks
                                                                           ""
                                                                         " (including WAITING and SCHEDULED tasks)")))
                                 (org-agenda-skip-function 'bh/skip-non-tasks)
                                 (org-tags-match-list-sublevels nil)
                                 (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                 (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)))
                     (tags "-REFILE/"
                           ((org-agenda-overriding-header "Tasks to Archive")
							(org-agenda-skip-function 'bh/skip-non-archivable-tasks)
							(org-tags-match-list-sublevels nil))))
					nil))))

     (defun bh/org-auto-exclude-function (tag)
       "Automatic task exclusion in the agenda with / RET"
       (and (cond
             ((string= tag "hold")
              t)
             ((string= tag "farm")
              t))
			(concat "-" tag)))

     (setq org-agenda-auto-exclude-function 'bh/org-auto-exclude-function)


     ;; Resume clocking task when emacs is restarted
     (org-clock-persistence-insinuate)


     ;;
     ;; Show lot of clocking history so it's easy to pick items off the C-F11 list
     (setq org-clock-history-length 23)
     ;; Resume clocking task on clock-in if the clock is open
     (setq org-clock-in-resume t)
     ;; Change tasks to NEXT when clocking in
     (setq org-clock-in-switch-to-state 'bh/clock-in-to-next)
     ;; Separate drawers for clocking and logs
     (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
     ;; Save clock data and state changes and notes in the LOGBOOK drawer
     (setq org-clock-into-drawer t)
     ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
     (setq org-clock-out-remove-zero-time-clocks t)
     ;; Clock out when moving task to a done state
     (setq org-clock-out-when-done t)
     ;; Save the running clock and all clock history when exiting Emacs, load it on startup
     (setq org-clock-persist t)
     ;; Do not prompt to resume an active clock
     (setq org-clock-persist-query-resume nil)
     ;; Enable auto clock resolution for finding open clocks
     (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
     ;; Include current clocking task in clock reports
     (setq org-clock-report-include-clocking-task t)


     ;; Keep tasks with dates on the global todo lists
     (setq org-agenda-todo-ignore-with-date nil)

     ;; Keep tasks with deadlines on the global todo lists
     (setq org-agenda-todo-ignore-deadlines nil)

     ;; Keep tasks with scheduled dates on the global todo lists
     (setq org-agenda-todo-ignore-scheduled nil)

     ;; Keep tasks with timestamps on the global todo lists
     (setq org-agenda-todo-ignore-timestamp nil)

     ;; Remove completed deadline tasks from the agenda view
     (setq org-agenda-skip-deadline-if-done t)

     ;; Remove completed scheduled tasks from the agenda view
     (setq org-agenda-skip-scheduled-if-done t)

     ;; Remove completed items from search results
     (setq org-agenda-skip-timestamp-if-done t)



     (setq bh/keep-clock-running nil)

     (defun bh/clock-in-to-next (kw)
       "Switch a task from TODO to NEXT when clocking in.
     Skips capture tasks, projects, and subprojects.
     Switch projects and subprojects from NEXT back to TODO"
       (when (not (and (boundp 'org-capture-mode) org-capture-mode))
         (cond
          ((and (member (org-get-todo-state) (list "TODO"))
				(bh/is-task-p))
           "NEXT")
          ((and (member (org-get-todo-state) (list "NEXT"))
				(bh/is-project-p))
           "TODO"))))

     (defun bh/find-project-task ()
       "Move point to the parent (project) task if any"
       (save-restriction
         (widen)
         (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
           (while (org-up-heading-safe)
             (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
               (setq parent-task (point))))
           (goto-char parent-task)
           parent-task)))

     (defun bh/punch-in (arg)
       "Start continuous clocking and set the default task to the
     selected task.  If no task is selected set the Organization task
     as the default task."
       (interactive "p")
       (setq bh/keep-clock-running t)
       (if (equal major-mode 'org-agenda-mode)
           ;;
           ;; We're in the agenda
           ;;
           (let* ((marker (org-get-at-bol 'org-hd-marker))
                  (tags (org-with-point-at marker (org-get-tags-at))))
             (if (and (eq arg 4) tags)
                 (org-agenda-clock-in '(16))
               (bh/clock-in-organization-task-as-default)))
         ;;
         ;; We are not in the agenda
         ;;
         (save-restriction
           (widen)
           ; Find the tags on the current task
           (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
               (org-clock-in '(16))
             (bh/clock-in-organization-task-as-default)))))

     (defun bh/punch-out ()
       (interactive)
       (setq bh/keep-clock-running nil)
       (when (org-clock-is-active)
         (org-clock-out))
       (org-agenda-remove-restriction-lock))

     (defun bh/clock-in-default-task ()
       (save-excursion
         (org-with-point-at org-clock-default-task
           (org-clock-in))))

     (defun bh/clock-in-parent-task ()
       "Move point to the parent (project) task if any and clock in"
       (let ((parent-task))
         (save-excursion
           (save-restriction
             (widen)
             (while (and (not parent-task) (org-up-heading-safe))
               (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
                 (setq parent-task (point))))
             (if parent-task
                 (org-with-point-at parent-task
                   (org-clock-in))
               (when bh/keep-clock-running
                 (bh/clock-in-default-task)))))))

     (defvar bh/organization-task-id "eb155a82-92b2-4f25-a3c6-0304591af2f9")

     (defun bh/clock-in-organization-task-as-default ()
       (interactive)
       (org-with-point-at (org-id-find bh/organization-task-id 'marker)
         (org-clock-in '(16))))

     (defun bh/clock-out-maybe ()
       (when (and bh/keep-clock-running
                  (not org-clock-clocking-in)
                  (marker-buffer org-clock-default-task)
                  (not org-clock-resolving-clocks-due-to-idleness))
         (bh/clock-in-parent-task)))

     (add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)

     (require 'org-id)

     (defun bh/clock-in-task-by-id (id)
       "Clock in a task by id"
       (org-with-point-at (org-id-find id 'marker)
         (org-clock-in nil)))

     (defun bh/clock-in-last-task (arg)
       "Clock in the interrupted task if there is one
     Skip the default task and get the next one.
     A prefix arg forces clock in of the default task."
       (interactive "p")
       (let ((clock-in-to-task
              (cond
               ((eq arg 4) org-clock-default-task)
               ((and (org-clock-is-active)
                     (equal org-clock-default-task (cadr org-clock-history)))
				(caddr org-clock-history))
               ((org-clock-is-active) (cadr org-clock-history))
               ((equal org-clock-default-task (car org-clock-history)) (cadr org-clock-history))
               (t (car org-clock-history)))))
         (widen)
         (org-with-point-at clock-in-to-task
           (org-clock-in nil))))

     (setq org-time-stamp-rounding-minutes (quote (1 1)))

     (setq org-agenda-clock-consistency-checks
           (quote (:max-duration "4:00"
                   :min-duration 0
                   :max-gap 0
                   :gap-ok-around ("4:00"))))

     (defun bh/is-task-p ()
       "Any task with a todo keyword and no subtask"
       (save-restriction
         (widen)
         (let ((has-subtask)
               (subtree-end (save-excursion (org-end-of-subtree t)))
               (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
           (save-excursion
             (forward-line 1)
             (while (and (not has-subtask)
                         (< (point) subtree-end)
                         (re-search-forward "^\*+ " subtree-end t))
               (when (member (org-get-todo-state) org-todo-keywords-1)
                 (setq has-subtask t))))
           (and is-a-task (not has-subtask)))))


     (defvar bh/hide-scheduled-and-waiting-next-tasks t)


     (setq org-archive-mark-done nil)
     (setq org-archive-location "%s_archive::* Archived Tasks")

     (defun bh/skip-non-archivable-tasks ()
       "Skip trees that are not available for archiving"
       (save-restriction
         (widen)
         ;; Consider only tasks with done todo headings as archivable candidates
         (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
               (subtree-end (save-excursion (org-end-of-subtree t))))
           (if (member (org-get-todo-state) org-todo-keywords-1)
               (if (member (org-get-todo-state) org-done-keywords)
                   (let* ((daynr (string-to-int (format-time-string "%d" (current-time))))
                          (a-month-ago (* 60 60 24 (+ daynr 1)))
                          (last-month (format-time-string "%Y-%m-" (time-subtract (current-time) (seconds-to-time a-month-ago))))
                          (this-month (format-time-string "%Y-%m-" (current-time)))
                          (subtree-is-current (save-excursion
												(forward-line 1)
												(and (< (point) subtree-end)
                                                     (re-search-forward (concat last-month "\\|" this-month) subtree-end t)))))
                     (if subtree-is-current
                         subtree-end ; Has a date in this month or last month, skip it
                       nil))  ; available to archive
                 (or subtree-end (point-max)))
             next-headline))))

     (setq org-alphabetical-lists t)



     (setq 
      org-agenda-clockreport-parameter-plist '(:link t :maxlevel 5 :step week :fileskip0 t :compact nil :narrow 80 :formula % "$6='(org-clock-time% @2$2 $2..$5);%.1f")
      org-time-clocksum-format '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t)
      org-agenda-start-with-clockreport-mode t
      org-agenda-start-with-log-mode t
      ;;org-agenda-start-with-follow-mode f
     )


     (defun bh/narrow-to-org-subtree ()
       (widen)
       (org-narrow-to-subtree)
       (save-restriction
         (org-agenda-set-restriction-lock)))


     (global-set-key (kbd "<f5>") 'bh/org-todo)

     (defun bh/org-todo (arg)
       (interactive "p")
       (if (equal arg 4)
           (save-restriction
             (bh/narrow-to-org-subtree)
             (org-show-todo-tree nil))
         (bh/narrow-to-org-subtree)
         (org-show-todo-tree nil)))

     (global-set-key (kbd "<S-f5>") 'bh/widen)

     (defun bh/widen ()
       (interactive)
       (if (equal major-mode 'org-agenda-mode)
           (progn
             (org-agenda-remove-restriction-lock)
             (when org-agenda-sticky
               (org-agenda-redo)))
         (widen)))

     (add-hook 'org-agenda-mode-hook
               '(lambda () (org-defkey org-agenda-mode-map "W" (lambda () (interactive) (setq bh/hide-scheduled-and-waiting-next-tasks t) (bh/widen))))
               'append)



     ;; Include agenda archive files when searching for things
     (setq org-agenda-text-search-extra-files (quote (agenda-archives)))

     ;; Show all future entries for repeating tasks
     (setq org-agenda-repeating-timestamp-show-all t)

     ;; Show all agenda dates - even if they are empty
     (setq org-agenda-show-all-dates t)

     ;; Sorting order for tasks on the agenda
     (setq org-agenda-sorting-strategy
           (quote ((agenda habit-down time-up user-defined-up effort-up category-keep)
                   (todo category-up effort-up)
                   (tags category-up effort-up)
                   (search category-up))))




     ;; Org bibligraphy
     (defun org-mode-reftex-search ()
       ;;jump to the notes for the paper pointed to at from reftex search
       (interactive)
       (org-open-link-from-string (format "[[notes:%s]]" (reftex-citation t))))


     (defun org-mode-reftex-setup ()
       (load-library "reftex")
       ;;(and (buffer-file-name) (file-exists-p (buffer-file-name))
       (and (buffer-file-name) (string-equal (buffer-file-name) "/home/murray/Dropbox/org/references.org")
			(progn
                      ;;enable auto-revert-mode to update reftex when bibtex file changes on disk
                      (global-auto-revert-mode t)
                      (reftex-parse-all)
                      ;;add a custom reftex cite format to insert links
                      (reftex-set-cite-format
                       '((?b . "[[bib:%l][%l-bib]]")
                             (?n . "[[notes:%l][%l-notes]]")
                             (?p . "[[papers:%l][%l-paper]]")
                             (?l . "[[tutorials:%l][%l-paper]]")
                             (?r . "** %2a (%y). %t\n\t:PROPERTIES:\n\t:Custom_ID: %l\n\t:END:\n\t[[bib:%l][%l-bib]]\n\t[[reports:%l][%l-report]]")
                             (?t . "%t")
                             (?h . "** %2a (%y). %t\n\t:PROPERTIES:\n\t:Custom_ID: %l\n\t:END:\n\t[[bib:%l][%l-bib]]\n\t[[papers:%l][%l-paper]]")
                             ))))
       (define-key org-mode-map (kbd "C-c )") 'reftex-citation)
       (define-key org-mode-map (kbd "C-c (") 'org-mode-reftex-search))

     (add-hook 'org-mode-hook 'org-mode-reftex-setup)
     ;(with-eval-after-load "~/Dropbox/org/references.org" 'org-mode-reftex-setup)


     (setq org-link-abbrev-alist
           '(("bib" . "~/Dropbox/Work/Resources/References/References.bib::%s")
                     ("notes" . "~/Dropbox/org/references.org::#%s")
                     ("reports" . "~/Dropbox/Work/Resources/References/Reports/%s.pdf")
                     ("papers" . "~/Dropbox/Work/Resources/References/Papers/%s.pdf")
                     ("tutorials" . "~/Dropbox/Work/Resources/References/Tutorials/%s.pdf")
                     ))

     ;; PDFs visited in Org-mode are opened in Evince (and not in the default choice) http://stackoverflow.com/a/8836108/789593
     (add-hook 'org-mode-hook
           '(lambda ()
              (delete '("\\.pdf\\'" . default) org-file-apps)
              (add-to-list 'org-file-apps '("\\.pdf\\'" . org-pdfview-open)))
              ;;(add-to-list 'org-file-apps '("\\.pdf\\'" . "evince %s")))
                      )




     (defun bh/is-project-p ()
       "Any task with a todo keyword subtask"
       (save-restriction
         (widen)
         (let ((has-subtask)
               (subtree-end (save-excursion (org-end-of-subtree t)))
               (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
           (save-excursion
             (forward-line 1)
             (while (and (not has-subtask)
                         (< (point) subtree-end)
                         (re-search-forward "^\*+ " subtree-end t))
               (when (member (org-get-todo-state) org-todo-keywords-1)
                 (setq has-subtask t))))
           (and is-a-task has-subtask))))

     (defun bh/is-project-subtree-p ()
       "Any task with a todo keyword that is in a project subtree.
     Callers of this function already widen the buffer view."
       (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                                   (point))))
         (save-excursion
           (bh/find-project-task)
           (if (equal (point) task)
               nil
             t))))

     (defun bh/is-task-p ()
       "Any task with a todo keyword and no subtask"
       (save-restriction
         (widen)
         (let ((has-subtask)
               (subtree-end (save-excursion (org-end-of-subtree t)))
               (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
           (save-excursion
             (forward-line 1)
             (while (and (not has-subtask)
                         (< (point) subtree-end)
                         (re-search-forward "^\*+ " subtree-end t))
               (when (member (org-get-todo-state) org-todo-keywords-1)
                 (setq has-subtask t))))
           (and is-a-task (not has-subtask)))))


     (defun bh/is-subproject-p ()
       "Any task which is a subtask of another project"
       (let ((is-subproject)
             (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
         (save-excursion
           (while (and (not is-subproject) (org-up-heading-safe))
             (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
               (setq is-subproject t))))
         (and is-a-task is-subproject)))

     (defun bh/list-sublevels-for-projects-indented ()
       "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
       This is normally used by skipping functions where this variable is already local to the agenda."
       (if (marker-buffer org-agenda-restrict-begin)
           (setq org-tags-match-list-sublevels 'indented)
         (setq org-tags-match-list-sublevels nil))
       nil)

     (defun bh/list-sublevels-for-projects ()
       "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
       This is normally used by skipping functions where this variable is already local to the agenda."
       (if (marker-buffer org-agenda-restrict-begin)
           (setq org-tags-match-list-sublevels t)
         (setq org-tags-match-list-sublevels nil))
       nil)

     (defvar bh/hide-scheduled-and-waiting-next-tasks t)

     (defun bh/toggle-next-task-display ()
       (interactive)
       (setq bh/hide-scheduled-and-waiting-next-tasks (not bh/hide-scheduled-and-waiting-next-tasks))
       (when  (equal major-mode 'org-agenda-mode)
         (org-agenda-redo))
       (message "%s WAITING and SCHEDULED NEXT Tasks" (if bh/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))

     (defun bh/skip-stuck-projects ()
       "Skip trees that are not stuck projects"
       (save-restriction
         (widen)
         (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
           (if (bh/is-project-p)
               (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                      (has-next ))
                 (save-excursion
                   (forward-line 1)
                   (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                     (unless (member "WAITING" (org-get-tags-at))
                       (setq has-next t))))
                 (if has-next
                     nil
                   next-headline)) ; a stuck project, has subtasks but no next task
             nil))))

     (defun bh/skip-non-stuck-projects ()
       "Skip trees that are not stuck projects"
       ;; (bh/list-sublevels-for-projects-indented)
       (save-restriction
         (widen)
         (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
           (if (bh/is-project-p)
               (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                      (has-next ))
                 (save-excursion
                   (forward-line 1)
                   (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                     (unless (member "WAITING" (org-get-tags-at))
                       (setq has-next t))))
                 (if has-next
                     next-headline
                   nil)) ; a stuck project, has subtasks but no next task
             next-headline))))

     (defun bh/skip-non-projects ()
       "Skip trees that are not projects"
       ;; (bh/list-sublevels-for-projects-indented)
       (if (save-excursion (bh/skip-non-stuck-projects))
           (save-restriction
             (widen)
             (let ((subtree-end (save-excursion (org-end-of-subtree t))))
               (cond
				((bh/is-project-p)
                 nil)
				((and (bh/is-project-subtree-p) (not (bh/is-task-p)))
                 nil)
				(t
                 subtree-end))))
         (save-excursion (org-end-of-subtree t))))

     (defun bh/skip-non-tasks ()
       "Show non-project tasks.
     Skip project and sub-project tasks, habits, and project related tasks."
       (save-restriction
         (widen)
         (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
           (cond
			((bh/is-task-p)
             nil)
			(t
             next-headline)))))

     ;; (defun bh/skip-project-trees-and-habits ()
     ;;   "Skip trees that are projects"
     ;;   (save-restriction
     ;;     (widen)
     ;;     (let ((subtree-end (save-excursion (org-end-of-subtree t))))
     ;;       (cond
     ;;        ((bh/is-project-p)
     ;;         subtree-end)
     ;;        ((org-is-habit-p)
     ;;         subtree-end)
     ;;        (t
     ;;         nil)))))

     ;; (defun bh/skip-projects-and-habits-and-single-tasks ()
     ;;   "Skip trees that are projects, tasks that are habits, single non-project tasks"
     ;;   (save-restriction
     ;;     (widen)
     ;;     (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
     ;;       (cond
     ;;        ((org-is-habit-p)
     ;;         next-headline)
     ;;        ((and bh/hide-scheduled-and-waiting-next-tasks
     ;;              (member "WAITING" (org-get-tags-at)))
     ;;         next-headline)
     ;;        ((bh/is-project-p)
     ;;         next-headline)
     ;;        ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
     ;;         next-headline)
     ;;        (t
     ;;         nil)))))

     ;; (defun bh/skip-project-tasks-maybe ()
     ;;   "Show tasks related to the current restriction.
     ;; When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
     ;; When not restricted, skip project and sub-project tasks, habits, and project related tasks."
     ;;   (save-restriction
     ;;     (widen)
     ;;     (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
     ;;            (next-headline (save-excursion (or (outline-next-heading) (point-max))))
     ;;            (limit-to-project (marker-buffer org-agenda-restrict-begin)))
     ;;       (cond
     ;;        ((bh/is-project-p)
     ;;         next-headline)
     ;;        ((org-is-habit-p)
     ;;         subtree-end)
     ;;        ((and (not limit-to-project)
     ;;              (bh/is-project-subtree-p))
     ;;         subtree-end)
     ;;        ((and limit-to-project
     ;;              (bh/is-project-subtree-p)
     ;;              (member (org-get-todo-state) (list "NEXT")))
     ;;         subtree-end)
     ;;        (t
     ;;         nil)))))

     ;; (defun bh/skip-project-tasks ()
     ;;   "Show non-project tasks.
     ;; Skip project and sub-project tasks, habits, and project related tasks."
     ;;   (save-restriction
     ;;     (widen)
     ;;     (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
     ;;       (cond
     ;;        ((bh/is-project-p)
     ;;         subtree-end)
     ;;        ((org-is-habit-p)
     ;;         subtree-end)
     ;;        ((bh/is-project-subtree-p)
     ;;         subtree-end)
     ;;        (t
     ;;         nil)))))

     ;; (defun bh/skip-non-project-tasks ()
     ;;   "Show project tasks.
     ;; Skip project and sub-project tasks, habits, and loose non-project tasks."
     ;;   (save-restriction
     ;;     (widen)
     ;;     (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
     ;;            (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
     ;;       (cond
     ;;        ((bh/is-project-p)
     ;;         next-headline)
     ;;        ((org-is-habit-p)
     ;;         subtree-end)
     ;;        ((and (bh/is-project-subtree-p)
     ;;              (member (org-get-todo-state) (list "NEXT")))
     ;;         subtree-end)
     ;;        ((not (bh/is-project-subtree-p))
     ;;         subtree-end)
     ;;        (t
     ;;         nil)))))

     ;; (defun bh/skip-projects-and-habits ()
     ;;   "Skip trees that are projects and tasks that are habits"
     ;;   (save-restriction
     ;;     (widen)
     ;;     (let ((subtree-end (save-excursion (org-end-of-subtree t))))
     ;;       (cond
     ;;        ((bh/is-project-p)
     ;;         subtree-end)
     ;;        ((org-is-habit-p)
     ;;         subtree-end)
     ;;        (t
     ;;         nil)))))

     (defun bh/skip-non-subprojects ()
       "Skip trees that are not projects"
       (let ((next-headline (save-excursion (outline-next-heading))))
         (if (bh/is-subproject-p)
             nil
           next-headline)))

     ;; (setq org-archive-mark-done nil)
     ;; (setq org-archive-location "%s_archive::* Archived Tasks")

     ;; (defun bh/skip-non-archivable-tasks ()
     ;;   "Skip trees that are not available for archiving"
     ;;   (save-restriction
     ;;     (widen)
     ;;     ;; Consider only tasks with done todo headings as archivable candidates
     ;;     (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
     ;;           (subtree-end (save-excursion (org-end-of-subtree t))))
     ;;       (if (member (org-get-todo-state) org-todo-keywords-1)
     ;;           (if (member (org-get-todo-state) org-done-keywords)
     ;;               (let* ((daynr (string-to-int (format-time-string "%d" (current-time))))
     ;;                      (a-month-ago (* 60 60 24 (+ daynr 1)))
     ;;                      (last-month (format-time-string "%Y-%m-" (time-subtract (current-time) (seconds-to-time a-month-ago))))
     ;;                      (this-month (format-time-string "%Y-%m-" (current-time)))
     ;;                      (subtree-is-current (save-excursion
     ;;                                            (forward-line 1)
     ;;                                            (and (< (point) subtree-end)
     ;;                                                 (re-search-forward (concat last-month "\\|" this-month) subtree-end t)))))
     ;;                 (if subtree-is-current
     ;;                     subtree-end ; Has a date in this month or last month, skip it
     ;;                   nil))  ; available to archive
     ;;             (or subtree-end (point-max)))
     ;;         next-headline))))

   #+END_SRC

** Part 2
  #+BEGIN_SRC emacs-lisp
    ;;org-mode+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    ;;the following removes emphasis *bold* _underline_  and /italic/ markers in org files - similar to [[][]] and hidden stars
    (setq org-hide-emphasis-markers t)
    ;; set the name of org-mode files to be included
    ;;(setq org-mobile-files (quote ("info.org")))
    (setq org-mobile-files '("~/Dropbox/org/"))
    ;; Set to the location of your Org files on your local system
    (setq org-directory "~/Dropbox/org")
    ;; Set to the name of the file where new notes will be stored
    (setq org-mobile-inbox-for-pull "~/Dropbox/org/flagged.org")
    ;; Set to <your Dropbox root directory>/MobileOrg.
    (setq org-mobile-directory "~/Dropbox/org/MobileOrg")

    ;; (setq org-export-latex-listings t)
    ;; (add-to-list 'org-export-latex-packages-alist '("" "listings"))
    ;; (add-to-list 'org-export-latex-packages-alist '("" "color"))

  #+END_SRC

** Part 3 - org-bullets
   #+BEGIN_SRC emacs-lisp
   (use-package org-bullets
   :ensure t
   :config
   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
   )
   #+END_SRC
* ESS

** Part 1
   #+BEGIN_SRC emacs-lisp
       (use-package ess
       :ensure t
       )

       (use-package ess-site
       :ensure ess)

       ;; prevent ess from replacing the underscore with a <--
     (ess-toggle-underscore nil)

     ;;ESS for Sweave files
     (defun Rnw-mode ()
			(require 'ess-noweb)
			(noweb-mode)
			(if (fboundp 'R-mode)
               (setq noweb-default-code-mode 'R-mode)))
          (add-to-list 'auto-mode-alist '("\\.rnw\\'" . Rnw-mode))
          (add-to-list 'auto-mode-alist '("\\.Snw\\'" . Rnw-mode))
          (setq reftex-file-extensions
               '(("Snw" "rnw" "nw" "tex" ".tex" ".ltx") ("bib" ".bib")))
          (setq TeX-file-extensions
               '("Snw" "rnw" "nw" "tex" "sty" "cls" "ltx" "texi" "texinfo"))

     ;;(global-set-key [f2] 'ess-eval-line-and-step)
     (define-key ess-mode-map [f2] 'ess-eval-line-and-step)
	 (defun start-new-r-process ()
	  (interactive)
	  (ess-request-a-process "" 0 0)
	 )
	 (global-set-key (kbd "S-<f2>") 'start-new-r-process)
     (setq ess-ask-for-ess-directory nil)
     (setq ess-local-process-name "R")
     (setq ansi-color-for-comint-mode 'filter)

     (defun my-ess-start-R ()
         (interactive)
         (if (not (member "*R*" (mapcar (function buffer-name) (buffer-list))))
           (progn
             (delete-other-windows)
             (setq w1 (selected-window))
             (setq w1name (buffer-name))
             (setq w2 (split-window w1))
             (R)
             (set-window-buffer w2 "*R*")
             (set-window-buffer w1 w1name))))

     (defun eval-chunk ()
       "This function marks and evaluates the current chunk"
       (interactive)
       ;; Get the current point
       (setq pCurrent (point))
       ;; Go back to chunk header
       (re-search-backward "^```.*") (forward-line 1) (setq p1 (point))
       (re-search-forward "^```") (forward-line -1) (setq p2 (line-end-position))
       (ess-eval-region p1 p2 nil)
       (goto-char pCurrent)
     )


     (defun eval-allAbove-R-regionsNoweb ()
       "This function evaluates all R code within babel R tags above the current point"
       (interactive)
       (setq p3 (point))
       ;; first work out if R is running and if not start it up in an inferior window
       (my-ess-start-R)
       (let ((total 0)(counti 1))
             (setq p3 (point))
             (setq p1 (point))
             (beginning-of-buffer)
             (while (<= (point) p3)
               (re-search-forward "^<<.*>>=") (setq p1 (point))
               ;;(re-search-forward "R") (setq p1 (point))
               (if (< p3 p1) ()
                     (re-search-forward "@") (re-search-backward "@") (setq p2 (point)) 
                     (setq counti (point))
                     (ess-eval-region p1 p2 nil)
                     ;;(message "this is %d" p1)     
                     ;;(message "Original is %d" p3)
                     )
               )
             total
             )
       (goto-char p3)
       )

     (define-key ess-mode-map [f8] 'eval-allAbove-R-regionsNoweb)
     (add-hook 'LaTeX-mode-hook
                       #'(lambda ()
                               (define-key LaTeX-mode-map [f8] 'eval-allAbove-R-regionsNoweb)))



     ;; (add-hook 'ess-mode-hook (lambda()
     ;;                                                 (set-face-attribute 'font-lock-comment-face nil
     ;;                                                                                         :family "Optima" :height 100)
     ;;                                                 )
     ;;                )


     ;; (add-hook 'LaTeX-mode-hook (lambda()
     ;;                                                 (set-face-attribute 'font-lock-comment-face nil
     ;;                                                                                         :family "Inconsolata" :height 100 :slant 'italic)
     ;;                                                 )
     ;;                )

     ;; (add-hook 'tex-mode-hook (lambda()
     ;;                                                 (set-face-attribute 'default nil
     ;;                                                                                         :family "Optima" :height 100)
     ;;                                                 )
     ;;                )

     ;; (add-hook 'ess-mode-hook
     ;;           (lambda ()
     ;;             (set (make-local-variable 'default-text-properties)
     ;;                  '(face variable-pitch))))

     ;;(add-hook 'ess-mode-hook 'turn-on-font-lock)

     ;; (defun ess-font-lock-db ()
     ;;   "Set font-lock colors (leave fore-/back-ground alone) courtesy David
     ;; Brahm <address@hidden>"
     ;;   (interactive)
     ;;   (set-face-foreground 'font-lock-comment-face       "SpringGreen4")  ; #...
     ;;   %...
     ;;   (set-face-foreground 'font-lock-string-face        "SeaGreen")   ; "..."
     ;;   "..."
     ;;   (set-face-foreground 'font-lock-keyword-face       "MediumBlue") ; if
     ;;   \end
     ;;   (set-face-foreground 'font-lock-function-name-face "VioletRed")  ; talk<-
     ;;   {center}
     ;;   (set-face-foreground 'font-lock-variable-name-face "Blue")         ; xv
     ;;   (set-face-foreground 'font-lock-type-face          "Goldenrod")  ; T,F
     ;;   ?
     ;;   (set-face-foreground 'font-lock-constant-face      "Magenta")    ; <-
     ;;   {eq1}
     ;;   )

     ;; The following is modified from noweb-font-lock-mode.el
     ;; so that we can highlight the R snippets within the rnw file
     (defface noweb-font-lock-code-chunk-face
       '((t (:family "Inconsolata" :background "#FFFFCC")))
       "Face to highlight noweb code chunks")
     (defface R-font-lock-doc-chunk-face
       '((t (:family "Inconsolata" :background "#FFFFCC")))
       "Face to highlight noweb doc chunks")
     (defvar R-font-lock-code-chunk-face 'R-font-lock-code-chunk-face
       "Face to use to highlight the first line of each code chunk (i.e. <<>>=)")
     (defvar R-font-lock-doc-chunk-face 'R-font-lock-doc-chunk-face
       "Face to use to highlight the first line of each doc chunk (i.e. @)")

     (defface R-font-lock-code-chunk-face
       '((t (:family "Inconsolata" :background "#FFFFCC")))
       "Face to highlight noweb code chunks")
     (defvar R-font-lock-code-chunk-face 'R-font-lock-code-chunk-face
       "Face to use to highlight the first line of each code chunk (i.e. <<>>=)")


     (defun noweb-font-lock-fontify-chunk-by-number ( chunk-num )
       "Fontify chunk chunk-num based on the current major mode."
       (save-excursion
         (font-lock-set-defaults)
         (setq old-beginning-of-syntax font-lock-beginning-of-syntax-function)
         (setq font-lock-beginning-of-syntax-function 'noweb-start-of-syntax)
         (setq font-lock-keywords
               (append font-lock-keywords
                       '(
                             ("\\(\\[\\[\\)\\([^]]*\\]*\\)\\(\\]\\]\\|\\$\\)"
                          (1 font-lock-reference-face prepend )
                          (2 font-lock-keyword-face prepend)
                          (3 font-lock-reference-face prepend))
                             ("^[ \t\n]*<<\\([^>]+\\)>>"        ;; reuse code chunk
                              (1 font-lock-keyword-face  prepend ))
                             ("^\\(<<\\)\\([^>]*\\)\\(>>=\\)\\(\\(?:[\t][^\n]*\\)?\\)[\n]" ;; code chunk start
                              (0 R-font-lock-code-chunk-face prepend )
                          (1 font-lock-reference-face  prepend )
                          (2 font-lock-keyword-face prepend)
                          (3 font-lock-reference-face prepend)
                              (4 font-lock-comment-face prepend))
                             ("^@\\(\\(?:[ \t][^\n]*\\)?\\)[\n]" ;; doc chunk start
                          (0 font-lock-reference-face prepend )
                              (0 R-font-lock-doc-chunk-face prepend )
                              (1 font-lock-comment-face prepend)
                              )
                             ;; ("^<<.*>>=.|\n]*"        ;; reuse code chunk
                             ;;  (0 R-font-lock-code-chunk-face prepend ))
                             )
                       )
               )
         (let ((r (cons (marker-position (cdr (aref noweb-chunk-vector
													chunk-num)))
						(marker-position (cdr (aref noweb-chunk-vector
													(1+ chunk-num)))))))
           (font-lock-fontify-region (car r) (cdr r))
           t)))
     ;;End of the R highlighting stuff

     ;; TRAMP requires that the local and report R program is the same - I think that by default ess has this either not set or else set for windows
     ;;(setq inferior-R-program-name "/usr/local/R")

     ;;View R data frames in libreoffice
     (use-package ess-view
     :ensure ess)
     ;;     (require 'ess-view)
     (setq ess-view--spreadsheet-program "/usr/local/bin/libreoffice5.0")

     ;; R help appears in its own frame
     (setq ess-help-own-frame 'one)

     (defun my-rdired-View (objname)
       "View an object in its own buffer. Similar to `ess-rdired-View', but my taste."
       (interactive "sEnter object name: ")
       (ess-command "tmpwidth <- options('width')[[1]]\n")
       (ess-command "options(width=9999)\n")
       (ess-execute objname nil (concat "R view " objname ))
       (ess-command "options(width=tmpwidth)\n")
       (switch-to-buffer (concat "*R view " objname "*"))
       (toggle-truncate-lines 1))

   #+END_SRC

** Part 2
  #+BEGIN_SRC emacs-lisp
    ;; If you want all help buffers to go into one frame do :
    (setq ess-help-own-frame 'one)
    (defun my-rdired-View (objname)
      "View an object in its own buffer. Similar to `ess-rdired-View', but my taste."
      (interactive "sEnter object name: ")
      (ess-command "tmpwidth <- options('width')[[1]]\n")
      (ess-command "options(width=9999)\n")
      (ess-execute objname nil (concat "R view " objname ))
      (ess-command "options(width=tmpwidth)\n")
      (switch-to-buffer (concat "*R view " objname "*"))
      (toggle-truncate-lines 1))
  #+END_SRC
   
